{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/thread-loader/dist/cjs.js!/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js!/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/picker/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/picker/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport create from '../utils/create';\nimport PickerColumn from './PickerColumn';\nimport deepClone from '../utils/deep-clone';\nexport default create({\n  name: 'picker',\n  components: {\n    PickerColumn: PickerColumn\n  },\n  props: {\n    title: String,\n    loading: Boolean,\n    showToolbar: Boolean,\n    confirmButtonText: String,\n    cancelButtonText: String,\n    visibleItemCount: {\n      type: Number,\n      default: 5\n    },\n    valueKey: {\n      type: String,\n      default: 'text'\n    },\n    itemHeight: {\n      type: Number,\n      default: 44\n    },\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      children: []\n    };\n  },\n  computed: {\n    frameStyle: function frameStyle() {\n      return {\n        height: this.itemHeight + 'px'\n      };\n    },\n    columnsStyle: function columnsStyle() {\n      return {\n        height: this.itemHeight * this.visibleItemCount + 'px'\n      };\n    },\n    simple: function simple() {\n      return this.columns.length && !this.columns[0].values;\n    }\n  },\n  watch: {\n    columns: function columns() {\n      this.setColumns();\n    }\n  },\n  methods: {\n    setColumns: function setColumns() {\n      var _this = this;\n\n      var columns = this.simple ? [{\n        values: this.columns\n      }] : this.columns;\n      columns.forEach(function (columns, index) {\n        _this.setColumnValues(index, deepClone(columns.values));\n      });\n    },\n    emit: function emit(event) {\n      if (this.simple) {\n        this.$emit(event, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit(event, this.getValues(), this.getIndexes());\n      }\n    },\n    onChange: function onChange(columnIndex) {\n      if (this.simple) {\n        this.$emit('change', this, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit('change', this, this.getValues(), columnIndex);\n      }\n    },\n    // get column instance by index\n    getColumn: function getColumn(index) {\n      return this.children[index];\n    },\n    // get column value by index\n    getColumnValue: function getColumnValue(index) {\n      var column = this.getColumn(index);\n      return column && column.getValue();\n    },\n    // set column value by index\n    setColumnValue: function setColumnValue(index, value) {\n      var column = this.getColumn(index);\n      column && column.setValue(value);\n    },\n    // get column option index by column index\n    getColumnIndex: function getColumnIndex(columnIndex) {\n      return (this.getColumn(columnIndex) || {}).currentIndex;\n    },\n    // set column option index by column index\n    setColumnIndex: function setColumnIndex(columnIndex, optionIndex) {\n      var column = this.getColumn(columnIndex);\n      column && column.setIndex(optionIndex);\n    },\n    // get options of column by index\n    getColumnValues: function getColumnValues(index) {\n      return (this.children[index] || {}).options;\n    },\n    // set options of column by index\n    setColumnValues: function setColumnValues(index, options) {\n      var column = this.children[index];\n\n      if (column && JSON.stringify(column.options) !== JSON.stringify(options)) {\n        column.options = options;\n        column.setIndex(0);\n      }\n    },\n    // get values of all columns\n    getValues: function getValues() {\n      return this.children.map(function (child) {\n        return child.getValue();\n      });\n    },\n    // set values of all columns\n    setValues: function setValues(values) {\n      var _this2 = this;\n\n      values.forEach(function (value, index) {\n        _this2.setColumnValue(index, value);\n      });\n    },\n    // get indexes of all columns\n    getIndexes: function getIndexes() {\n      return this.children.map(function (child) {\n        return child.currentIndex;\n      });\n    },\n    // set indexes of all columns\n    setIndexes: function setIndexes(indexes) {\n      var _this3 = this;\n\n      indexes.forEach(function (optionIndex, columnIndex) {\n        _this3.setColumnIndex(columnIndex, optionIndex);\n      });\n    }\n  }\n});",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <div :class=\"b('toolbar')\" class=\"x-hairline--top-bottom\" v-if=\"showToolbar\">\n      <slot>\n        <div :class=\"b('cancel')\" @click=\"emit('cancel')\">{{ cancelButtonText || $t('cancel') }}</div>\n        <div :class=\"b('title')\" class=\"x-ellipsis\" v-if=\"title\" v-text=\"title\" />\n        <div :class=\"b('confirm')\" @click=\"emit('confirm')\">{{ confirmButtonText || $t('confirm') }}</div>\n      </slot>\n    </div>\n    <div v-if=\"loading\" :class=\"b('loading')\">\n      <loading />\n    </div>\n    <div :class=\"b('columns')\" :style=\"columnsStyle\" @touchmove.prevent>\n      <picker-column\n        v-for=\"(item, index) in (simple ? [columns] : columns)\"\n        :key=\"index\"\n        :value-key=\"valueKey\"\n        :initial-options=\"simple ? item : item.values\"\n        :class-name=\"item.className\"\n        :default-index=\"item.defaultIndex\"\n        :item-height=\"itemHeight\"\n        :visible-item-count=\"visibleItemCount\"\n        @change=\"onChange(index)\"\n      />\n      <div :class=\"b('frame')\" class=\"x-hairline--top-bottom\" :style=\"frameStyle\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport PickerColumn from './PickerColumn';\nimport deepClone from '../utils/deep-clone';\n\nexport default create({\n  name: 'picker',\n\n  components: {\n    PickerColumn\n  },\n\n  props: {\n    title: String,\n    loading: Boolean,\n    showToolbar: Boolean,\n    confirmButtonText: String,\n    cancelButtonText: String,\n    visibleItemCount: {\n      type: Number,\n      default: 5\n    },\n    valueKey: {\n      type: String,\n      default: 'text'\n    },\n    itemHeight: {\n      type: Number,\n      default: 44\n    },\n    columns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      children: []\n    };\n  },\n\n  computed: {\n    frameStyle() {\n      return {\n        height: this.itemHeight + 'px'\n      };\n    },\n\n    columnsStyle() {\n      return {\n        height: this.itemHeight * this.visibleItemCount + 'px'\n      };\n    },\n\n    simple() {\n      return this.columns.length && !this.columns[0].values;\n    }\n  },\n\n  watch: {\n    columns() {\n      this.setColumns();\n    }\n  },\n\n  methods: {\n    setColumns() {\n      const columns = this.simple ? [{ values: this.columns }] : this.columns;\n      columns.forEach((columns, index) => {\n        this.setColumnValues(index, deepClone(columns.values));\n      });\n    },\n\n    emit(event) {\n      if (this.simple) {\n        this.$emit(event, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit(event, this.getValues(), this.getIndexes());\n      }\n    },\n\n    onChange(columnIndex) {\n      if (this.simple) {\n        this.$emit('change', this, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit('change', this, this.getValues(), columnIndex);\n      }\n    },\n\n    // get column instance by index\n    getColumn(index) {\n      return this.children[index];\n    },\n\n    // get column value by index\n    getColumnValue(index) {\n      const column = this.getColumn(index);\n      return column && column.getValue();\n    },\n\n    // set column value by index\n    setColumnValue(index, value) {\n      const column = this.getColumn(index);\n      column && column.setValue(value);\n    },\n\n    // get column option index by column index\n    getColumnIndex(columnIndex) {\n      return (this.getColumn(columnIndex) || {}).currentIndex;\n    },\n\n    // set column option index by column index\n    setColumnIndex(columnIndex, optionIndex) {\n      const column = this.getColumn(columnIndex);\n      column && column.setIndex(optionIndex);\n    },\n\n    // get options of column by index\n    getColumnValues(index) {\n      return (this.children[index] || {}).options;\n    },\n\n    // set options of column by index\n    setColumnValues(index, options) {\n      const column = this.children[index];\n      if (column && JSON.stringify(column.options) !== JSON.stringify(options)) {\n        column.options = options;\n        column.setIndex(0);\n      }\n    },\n\n    // get values of all columns\n    getValues() {\n      return this.children.map(child => child.getValue());\n    },\n\n    // set values of all columns\n    setValues(values) {\n      values.forEach((value, index) => {\n        this.setColumnValue(index, value);\n      });\n    },\n\n    // get indexes of all columns\n    getIndexes() {\n      return this.children.map(child => child.currentIndex);\n    },\n\n    // set indexes of all columns\n    setIndexes(indexes) {\n      indexes.forEach((optionIndex, columnIndex) => {\n        this.setColumnIndex(columnIndex, optionIndex);\n      });\n    }\n  }\n});\n</script>\n"],"sourceRoot":"node_modules/healen-x-ui/packages/picker"}]}