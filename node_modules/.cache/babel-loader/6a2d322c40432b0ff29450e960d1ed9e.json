{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/thread-loader/dist/cjs.js!/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js!/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/circle/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/circle/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport create from '../utils/create';\nimport { raf, cancel } from '../utils/raf';\nexport default create({\n  name: 'circle',\n  props: {\n    text: String,\n    value: Number,\n    speed: Number,\n    size: {\n      type: String,\n      default: '100px'\n    },\n    fill: {\n      type: String,\n      default: 'none'\n    },\n    rate: {\n      type: Number,\n      default: 100\n    },\n    layerColor: {\n      type: String,\n      default: '#fff'\n    },\n    color: {\n      type: String,\n      default: '#38f'\n    },\n    strokeWidth: {\n      type: Number,\n      default: 40\n    },\n    clockwise: {\n      type: Boolean,\n      default: true\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    this.perimeter = 3140;\n    this.path = 'M 530 530 m -500, 0 a 500, 500 0 1, 1 1000, 0 a 500, 500 0 1, 1 -1000, 0';\n  },\n  computed: {\n    style: function style() {\n      return {\n        width: this.size,\n        height: this.size\n      };\n    },\n    layerStyle: function layerStyle() {\n      var offset = this.perimeter * (100 - this.value) / 100;\n      offset = this.clockwise ? offset : this.perimeter * 2 - offset;\n      return {\n        stroke: \"\".concat(this.color),\n        strokeDashoffset: \"\".concat(offset, \"px\"),\n        strokeWidth: \"\".concat(this.strokeWidth + 1, \"px\")\n      };\n    },\n    hoverStyle: function hoverStyle() {\n      return {\n        fill: \"\".concat(this.fill),\n        stroke: \"\".concat(this.layerColor),\n        strokeWidth: \"\".concat(this.strokeWidth, \"px\")\n      };\n    }\n  },\n  watch: {\n    rate: {\n      handler: function handler() {\n        this.startTime = Date.now();\n        this.startRate = this.value;\n        this.endRate = this.format(this.rate);\n        this.increase = this.endRate > this.startRate;\n        this.duration = Math.abs((this.startRate - this.endRate) * 1000 / this.speed);\n\n        if (this.speed) {\n          cancel(this.rafId);\n          this.rafId = raf(this.animate);\n        } else {\n          this.$emit('input', this.endRate);\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    animate: function animate() {\n      var now = Date.now();\n      var progress = Math.min((now - this.startTime) / this.duration, 1);\n      var rate = progress * (this.endRate - this.startRate) + this.startRate;\n      this.$emit('input', this.format(parseFloat(rate.toFixed(1))));\n\n      if (this.increase ? rate < this.endRate : rate > this.endRate) {\n        this.rafId = raf(this.animate);\n      }\n    },\n    format: function format(rate) {\n      return Math.min(Math.max(rate, 0), 100);\n    }\n  }\n});",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :class=\"b()\" :style=\"style\">\n    <svg viewBox=\"0 0 1060 1060\">\n      <path :class=\"b('hover')\" :style=\"hoverStyle\" :d=\"path\" />\n      <path :class=\"b('layer')\" :style=\"layerStyle\" :d=\"path\" />\n    </svg>\n    <slot>\n      <div :class=\"b('text')\">{{ text }}</div>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport { raf, cancel } from '../utils/raf';\n\nexport default create({\n  name: 'circle',\n\n  props: {\n    text: String,\n    value: Number,\n    speed: Number,\n    size: {\n      type: String,\n      default: '100px'\n    },\n    fill: {\n      type: String,\n      default: 'none'\n    },\n    rate: {\n      type: Number,\n      default: 100\n    },\n    layerColor: {\n      type: String,\n      default: '#fff'\n    },\n    color: {\n      type: String,\n      default: '#38f'\n    },\n    strokeWidth: {\n      type: Number,\n      default: 40\n    },\n    clockwise: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  beforeCreate() {\n    this.perimeter = 3140;\n    this.path = 'M 530 530 m -500, 0 a 500, 500 0 1, 1 1000, 0 a 500, 500 0 1, 1 -1000, 0';\n  },\n\n  computed: {\n    style() {\n      return {\n        width: this.size,\n        height: this.size\n      };\n    },\n\n    layerStyle() {\n      let offset = this.perimeter * (100 - this.value) / 100;\n      offset = this.clockwise ? offset : this.perimeter * 2 - offset;\n      return {\n        stroke: `${this.color}`,\n        strokeDashoffset: `${offset}px`,\n        strokeWidth: `${this.strokeWidth + 1}px`\n      };\n    },\n\n    hoverStyle() {\n      return {\n        fill: `${this.fill}`,\n        stroke: `${this.layerColor}`,\n        strokeWidth: `${this.strokeWidth}px`\n      };\n    }\n  },\n\n  watch: {\n    rate: {\n      handler() {\n        this.startTime = Date.now();\n        this.startRate = this.value;\n        this.endRate = this.format(this.rate);\n        this.increase = this.endRate > this.startRate;\n        this.duration = Math.abs((this.startRate - this.endRate) * 1000 / this.speed);\n        if (this.speed) {\n          cancel(this.rafId);\n          this.rafId = raf(this.animate);\n        } else {\n          this.$emit('input', this.endRate);\n        }\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    animate() {\n      const now = Date.now();\n      const progress = Math.min((now - this.startTime) / this.duration, 1);\n      const rate = progress * (this.endRate - this.startRate) + this.startRate;\n      this.$emit('input', this.format(parseFloat(rate.toFixed(1))));\n      if (this.increase ? rate < this.endRate : rate > this.endRate) {\n        this.rafId = raf(this.animate);\n      }\n    },\n\n    format(rate) {\n      return Math.min(Math.max(rate, 0), 100);\n    }\n  }\n});\n</script>\n"],"sourceRoot":"node_modules/healen-x-ui/packages/circle"}]}