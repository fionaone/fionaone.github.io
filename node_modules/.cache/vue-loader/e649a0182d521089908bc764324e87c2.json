{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/toast/Toast.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/toast/Toast.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport Popup from '../mixins/popup';\n\nconst STYLE_LIST = ['success', 'fail', 'loading'];\n\nexport default create({\n  name: 'toast',\n\n  mixins: [Popup],\n\n  props: {\n    forbidClick: Boolean,\n    message: [String, Number],\n    type: {\n      type: String,\n      default: 'text'\n    },\n    loadingType: {\n      type: String,\n      default: 'circular'\n    },\n    position: {\n      type: String,\n      default: 'middle'\n    },\n    lockScroll: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      clickable: false\n    };\n  },\n\n  computed: {\n    style() {\n      return STYLE_LIST.indexOf(this.type) !== -1 ? 'default' : this.type;\n    }\n  },\n\n  mounted() {\n    this.toggleClickale();\n  },\n\n  destroyed() {\n    this.toggleClickale();\n  },\n\n  watch: {\n    value() {\n      this.toggleClickale();\n    },\n\n    forbidClick() {\n      this.toggleClickale();\n    }\n  },\n\n  methods: {\n    toggleClickale() {\n      const clickable = this.value && this.forbidClick;\n      if (this.clickable !== clickable) {\n        this.clickable = clickable;\n        const action = clickable ? 'add' : 'remove';\n        document.body.classList[action]('x-toast--unclickable');\n      }\n    }\n  }\n});\n",{"version":3,"sources":["Toast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Toast.vue","sourceRoot":"node_modules/healen-x-ui/packages/toast","sourcesContent":["<template>\n  <transition name=\"x-fade\">\n    <div v-show=\"value\" :class=\"b([style, position])\">\n      <!-- text only -->\n      <div v-if=\"style === 'text'\">{{ message }}</div>\n      <div v-if=\"style === 'html'\" v-html=\"message\" />\n\n      <!-- with icon -->\n      <template v-if=\"style === 'default'\">\n        <loading v-if=\"type === 'loading'\" color=\"white\" :type=\"loadingType\" />\n        <icon v-else :class=\"b('icon')\" :name=\"type\" />\n        <div v-if=\"isDef(message)\" :class=\"b('text')\">{{ message }}</div>\n      </template>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport Popup from '../mixins/popup';\n\nconst STYLE_LIST = ['success', 'fail', 'loading'];\n\nexport default create({\n  name: 'toast',\n\n  mixins: [Popup],\n\n  props: {\n    forbidClick: Boolean,\n    message: [String, Number],\n    type: {\n      type: String,\n      default: 'text'\n    },\n    loadingType: {\n      type: String,\n      default: 'circular'\n    },\n    position: {\n      type: String,\n      default: 'middle'\n    },\n    lockScroll: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      clickable: false\n    };\n  },\n\n  computed: {\n    style() {\n      return STYLE_LIST.indexOf(this.type) !== -1 ? 'default' : this.type;\n    }\n  },\n\n  mounted() {\n    this.toggleClickale();\n  },\n\n  destroyed() {\n    this.toggleClickale();\n  },\n\n  watch: {\n    value() {\n      this.toggleClickale();\n    },\n\n    forbidClick() {\n      this.toggleClickale();\n    }\n  },\n\n  methods: {\n    toggleClickale() {\n      const clickable = this.value && this.forbidClick;\n      if (this.clickable !== clickable) {\n        this.clickable = clickable;\n        const action = clickable ? 'add' : 'remove';\n        document.body.classList[action]('x-toast--unclickable');\n      }\n    }\n  }\n});\n</script>\n"]}]}