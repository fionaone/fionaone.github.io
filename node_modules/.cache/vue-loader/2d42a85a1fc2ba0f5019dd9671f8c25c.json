{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/swipe-cell/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/swipe-cell/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport Clickoutside from '../utils/clickoutside';\nimport Touch from '../mixins/touch';\n\nconst THRESHOLD = 0.15;\n\nexport default create({\n  name: 'swipe-cell',\n\n  mixins: [Touch],\n\n  props: {\n    onClose: Function,\n    disabled: Boolean,\n    leftWidth: {\n      type: Number,\n      default: 0\n    },\n    rightWidth: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  directives: {\n    Clickoutside\n  },\n\n  data() {\n    return {\n      offset: 0,\n      draging: false\n    };\n  },\n\n  computed: {\n    wrapperStyle() {\n      return {\n        transform: `translate3d(${this.offset}px, 0, 0)`,\n        transition: this.draging ? 'none' : '.6s cubic-bezier(0.18, 0.89, 0.32, 1)'\n      };\n    }\n  },\n\n  methods: {\n    open(position) {\n      const offset = position === 'left' ? this.leftWidth : -this.rightWidth;\n      this.swipeMove(offset);\n      this.resetSwipeStatus();\n    },\n\n    close() {\n      this.offset = 0;\n    },\n\n    resetSwipeStatus() {\n      this.swiping = false;\n      this.opened = true;\n    },\n\n    swipeMove(offset = 0) {\n      this.offset = offset;\n      offset && (this.swiping = true);\n      !offset && (this.opened = false);\n    },\n\n    swipeLeaveTransition(direction) {\n      const { offset, leftWidth, rightWidth } = this;\n      const threshold = this.opened ? (1 - THRESHOLD) : THRESHOLD;\n\n      // right\n      if (direction > 0 && -offset > rightWidth * threshold && rightWidth > 0) {\n        this.open('right');\n      // left\n      } else if (direction < 0 && offset > leftWidth * threshold && leftWidth > 0) {\n        this.open('left');\n      } else {\n        this.swipeMove();\n      }\n    },\n\n    startDrag(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.draging = true;\n      this.touchStart(event);\n\n      if (this.opened) {\n        this.startX -= this.offset;\n      }\n    },\n\n    onDrag(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.touchMove(event);\n      const { deltaX } = this;\n\n      if ((deltaX < 0 && (-deltaX > this.rightWidth || !this.rightWidth)) ||\n        (deltaX > 0 && (deltaX > this.leftWidth || deltaX > 0 && !this.leftWidth))) {\n        return;\n      }\n\n      if (this.direction === 'horizontal') {\n        event.preventDefault();\n        this.swipeMove(deltaX);\n      };\n    },\n\n    endDrag() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.draging = false;\n      if (this.swiping) {\n        this.swipeLeaveTransition(this.offset > 0 ? -1 : 1);\n      };\n    },\n\n    onClick(position = 'outside') {\n      this.$emit('click', position);\n\n      if (!this.offset) {\n        return;\n      }\n\n      if (this.onClose) {\n        this.onClose(position, this);\n      } else {\n        this.swipeMove(0);\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/swipe-cell","sourcesContent":["<template>\n  <div\n    v-clickoutside:touchstart=\"onClick\"\n    :class=\"b()\"\n    @click=\"onClick('cell')\"\n    @touchstart=\"startDrag\"\n    @touchmove=\"onDrag\"\n    @touchend=\"endDrag\"\n    @touchcancel=\"endDrag\"\n  >\n    <div\n      :class=\"b('wrapper')\"\n      :style=\"wrapperStyle\"\n      @transitionend=\"swipe = false\"\n    >\n      <div v-if=\"leftWidth\" :class=\"b('left')\" @click.stop=\"onClick('left')\">\n        <slot name=\"left\" />\n      </div>\n      <slot />\n      <div v-if=\"rightWidth\" :class=\"b('right')\" @click.stop=\"onClick('right')\">\n        <slot name=\"right\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport Clickoutside from '../utils/clickoutside';\nimport Touch from '../mixins/touch';\n\nconst THRESHOLD = 0.15;\n\nexport default create({\n  name: 'swipe-cell',\n\n  mixins: [Touch],\n\n  props: {\n    onClose: Function,\n    disabled: Boolean,\n    leftWidth: {\n      type: Number,\n      default: 0\n    },\n    rightWidth: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  directives: {\n    Clickoutside\n  },\n\n  data() {\n    return {\n      offset: 0,\n      draging: false\n    };\n  },\n\n  computed: {\n    wrapperStyle() {\n      return {\n        transform: `translate3d(${this.offset}px, 0, 0)`,\n        transition: this.draging ? 'none' : '.6s cubic-bezier(0.18, 0.89, 0.32, 1)'\n      };\n    }\n  },\n\n  methods: {\n    open(position) {\n      const offset = position === 'left' ? this.leftWidth : -this.rightWidth;\n      this.swipeMove(offset);\n      this.resetSwipeStatus();\n    },\n\n    close() {\n      this.offset = 0;\n    },\n\n    resetSwipeStatus() {\n      this.swiping = false;\n      this.opened = true;\n    },\n\n    swipeMove(offset = 0) {\n      this.offset = offset;\n      offset && (this.swiping = true);\n      !offset && (this.opened = false);\n    },\n\n    swipeLeaveTransition(direction) {\n      const { offset, leftWidth, rightWidth } = this;\n      const threshold = this.opened ? (1 - THRESHOLD) : THRESHOLD;\n\n      // right\n      if (direction > 0 && -offset > rightWidth * threshold && rightWidth > 0) {\n        this.open('right');\n      // left\n      } else if (direction < 0 && offset > leftWidth * threshold && leftWidth > 0) {\n        this.open('left');\n      } else {\n        this.swipeMove();\n      }\n    },\n\n    startDrag(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.draging = true;\n      this.touchStart(event);\n\n      if (this.opened) {\n        this.startX -= this.offset;\n      }\n    },\n\n    onDrag(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.touchMove(event);\n      const { deltaX } = this;\n\n      if ((deltaX < 0 && (-deltaX > this.rightWidth || !this.rightWidth)) ||\n        (deltaX > 0 && (deltaX > this.leftWidth || deltaX > 0 && !this.leftWidth))) {\n        return;\n      }\n\n      if (this.direction === 'horizontal') {\n        event.preventDefault();\n        this.swipeMove(deltaX);\n      };\n    },\n\n    endDrag() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.draging = false;\n      if (this.swiping) {\n        this.swipeLeaveTransition(this.offset > 0 ? -1 : 1);\n      };\n    },\n\n    onClick(position = 'outside') {\n      this.$emit('click', position);\n\n      if (!this.offset) {\n        return;\n      }\n\n      if (this.onClose) {\n        this.onClose(position, this);\n      } else {\n        this.swipeMove(0);\n      }\n    }\n  }\n});\n</script>\n"]}]}