{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/uploader/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/uploader/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\n\nexport default create({\n  name: 'uploader',\n\n  inheritAttrs: false,\n\n  props: {\n    disabled: Boolean,\n    beforeRead: Function,\n    afterRead: Function,\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    resultType: {\n      type: String,\n      default: 'dataUrl'\n    },\n    maxSize: {\n      type: Number,\n      default: Number.MAX_VALUE\n    }\n  },\n\n  methods: {\n    onChange(event) {\n      let { files } = event.target;\n      if (this.disabled || !files.length) {\n        return;\n      }\n\n      files = files.length === 1 ? files[0] : [].slice.call(files, 0);\n      if (!files || (this.beforeRead && !this.beforeRead(files))) {\n        return;\n      }\n\n      if (Array.isArray(files)) {\n        Promise.all(files.map(this.readFile)).then(contents => {\n          let oversize = false;\n          const payload = files.map((file, index) => {\n            if (file.size > this.maxSize) {\n              oversize = true;\n            }\n\n            return {\n              file: files[index],\n              content: contents[index]\n            };\n          });\n\n          this.onAfterRead(payload, oversize);\n        });\n      } else {\n        this.readFile(files).then(content => {\n          this.onAfterRead(\n            { file: files, content },\n            files.size > this.maxSize\n          );\n        });\n      }\n    },\n\n    readFile(file) {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n\n        reader.onload = event => {\n          resolve(event.target.result);\n        };\n\n        if (this.resultType === 'dataUrl') {\n          reader.readAsDataURL(file);\n        } else if (this.resultType === 'text') {\n          reader.readAsText(file);\n        }\n      });\n    },\n\n    onAfterRead(files, oversize) {\n      if (oversize) {\n        this.$emit('oversize', files);\n      } else {\n        this.afterRead && this.afterRead(files);\n        this.$refs.input && (this.$refs.input.value = '');\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/uploader","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <slot />\n    <input\n      v-bind=\"$attrs\"\n      ref=\"input\"\n      type=\"file\"\n      :class=\"b('input')\"\n      :accept=\"accept\"\n      :disabled=\"disabled\"\n      @change=\"onChange\"\n    >\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\n\nexport default create({\n  name: 'uploader',\n\n  inheritAttrs: false,\n\n  props: {\n    disabled: Boolean,\n    beforeRead: Function,\n    afterRead: Function,\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    resultType: {\n      type: String,\n      default: 'dataUrl'\n    },\n    maxSize: {\n      type: Number,\n      default: Number.MAX_VALUE\n    }\n  },\n\n  methods: {\n    onChange(event) {\n      let { files } = event.target;\n      if (this.disabled || !files.length) {\n        return;\n      }\n\n      files = files.length === 1 ? files[0] : [].slice.call(files, 0);\n      if (!files || (this.beforeRead && !this.beforeRead(files))) {\n        return;\n      }\n\n      if (Array.isArray(files)) {\n        Promise.all(files.map(this.readFile)).then(contents => {\n          let oversize = false;\n          const payload = files.map((file, index) => {\n            if (file.size > this.maxSize) {\n              oversize = true;\n            }\n\n            return {\n              file: files[index],\n              content: contents[index]\n            };\n          });\n\n          this.onAfterRead(payload, oversize);\n        });\n      } else {\n        this.readFile(files).then(content => {\n          this.onAfterRead(\n            { file: files, content },\n            files.size > this.maxSize\n          );\n        });\n      }\n    },\n\n    readFile(file) {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n\n        reader.onload = event => {\n          resolve(event.target.result);\n        };\n\n        if (this.resultType === 'dataUrl') {\n          reader.readAsDataURL(file);\n        } else if (this.resultType === 'text') {\n          reader.readAsText(file);\n        }\n      });\n    },\n\n    onAfterRead(files, oversize) {\n      if (oversize) {\n        this.$emit('oversize', files);\n      } else {\n        this.afterRead && this.afterRead(files);\n        this.$refs.input && (this.$refs.input.value = '');\n      }\n    }\n  }\n});\n</script>\n"]}]}