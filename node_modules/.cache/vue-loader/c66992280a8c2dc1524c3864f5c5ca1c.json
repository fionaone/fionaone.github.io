{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/area/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/area/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport Picker from '../picker';\n\nexport default create({\n  name: 'area',\n\n  components: {\n    Picker\n  },\n\n  props: {\n    value: String,\n    title: String,\n    loading: Boolean,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    areaList: {\n      type: Object,\n      default: () => ({})\n    },\n    columnsNum: {\n      type: [String, Number],\n      default: 3\n    }\n  },\n\n  data() {\n    return {\n      code: this.value,\n      columns: [{ values: [] }, { values: [] }, { values: [] }]\n    };\n  },\n\n  computed: {\n    province() {\n      return this.areaList.province_list || {};\n    },\n\n    city() {\n      return this.areaList.city_list || {};\n    },\n\n    county() {\n      return this.areaList.county_list || {};\n    },\n\n    displayColumns() {\n      return this.columns.slice(0, +this.columnsNum);\n    }\n  },\n\n  watch: {\n    value() {\n      this.code = this.value;\n      this.setValues();\n    },\n\n    areaList: {\n      deep: true,\n      handler() {\n        this.setValues();\n      }\n    }\n  },\n\n  mounted() {\n    this.setValues();\n  },\n\n  methods: {\n    // get list by code\n    getList(type, code) {\n      let result = [];\n      if (type !== 'province' && !code) {\n        return result;\n      }\n\n      const list = this[type];\n      result = Object.keys(list).map(code => ({\n        code,\n        name: list[code]\n      }));\n\n      if (code) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(item => item.code.indexOf(code) === 0);\n      }\n\n      return result;\n    },\n\n    // get index by code\n    getIndex(type, code) {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    },\n\n    onChange(picker, values, index) {\n      this.code = values[index].code;\n      this.setValues();\n      this.$emit('change', picker, values, index);\n    },\n\n    setValues() {\n      let code = this.code || Object.keys(this.county)[0] || '';\n      const { picker } = this.$refs;\n      const province = this.getList('province');\n      const city = this.getList('city', code.slice(0, 2));\n\n      if (!picker) {\n        return;\n      }\n\n      picker.setColumnValues(0, province);\n      picker.setColumnValues(1, city);\n\n      if (city.length && code.slice(2, 4) === '00') {\n        code = city[0].code;\n      }\n\n      picker.setColumnValues(2, this.getList('county', code.slice(0, 4)));\n      picker.setIndexes([\n        this.getIndex('province', code),\n        this.getIndex('city', code),\n        this.getIndex('county', code)\n      ]);\n    },\n\n    getValues() {\n      return this.$refs.picker ? this.$refs.picker.getValues().filter(value => !!value) : [];\n    },\n\n    getArea() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: ''\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map(item => item.name);\n\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    },\n\n    reset() {\n      this.code = '';\n      this.setValues();\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/area","sourcesContent":["<template>\n  <picker\n    ref=\"picker\"\n    :class=\"b()\"\n    show-toolbar\n    value-key=\"name\"\n    :title=\"title\"\n    :loading=\"loading\"\n    :columns=\"displayColumns\"\n    :item-height=\"itemHeight\"\n    :visible-item-count=\"visibleItemCount\"\n    @change=\"onChange\"\n    @confirm=\"$emit('confirm', $event)\"\n    @cancel=\"$emit('cancel', $event)\"\n  />\n</template>\n\n<script>\nimport create from '../utils/create';\nimport Picker from '../picker';\n\nexport default create({\n  name: 'area',\n\n  components: {\n    Picker\n  },\n\n  props: {\n    value: String,\n    title: String,\n    loading: Boolean,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    areaList: {\n      type: Object,\n      default: () => ({})\n    },\n    columnsNum: {\n      type: [String, Number],\n      default: 3\n    }\n  },\n\n  data() {\n    return {\n      code: this.value,\n      columns: [{ values: [] }, { values: [] }, { values: [] }]\n    };\n  },\n\n  computed: {\n    province() {\n      return this.areaList.province_list || {};\n    },\n\n    city() {\n      return this.areaList.city_list || {};\n    },\n\n    county() {\n      return this.areaList.county_list || {};\n    },\n\n    displayColumns() {\n      return this.columns.slice(0, +this.columnsNum);\n    }\n  },\n\n  watch: {\n    value() {\n      this.code = this.value;\n      this.setValues();\n    },\n\n    areaList: {\n      deep: true,\n      handler() {\n        this.setValues();\n      }\n    }\n  },\n\n  mounted() {\n    this.setValues();\n  },\n\n  methods: {\n    // get list by code\n    getList(type, code) {\n      let result = [];\n      if (type !== 'province' && !code) {\n        return result;\n      }\n\n      const list = this[type];\n      result = Object.keys(list).map(code => ({\n        code,\n        name: list[code]\n      }));\n\n      if (code) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(item => item.code.indexOf(code) === 0);\n      }\n\n      return result;\n    },\n\n    // get index by code\n    getIndex(type, code) {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    },\n\n    onChange(picker, values, index) {\n      this.code = values[index].code;\n      this.setValues();\n      this.$emit('change', picker, values, index);\n    },\n\n    setValues() {\n      let code = this.code || Object.keys(this.county)[0] || '';\n      const { picker } = this.$refs;\n      const province = this.getList('province');\n      const city = this.getList('city', code.slice(0, 2));\n\n      if (!picker) {\n        return;\n      }\n\n      picker.setColumnValues(0, province);\n      picker.setColumnValues(1, city);\n\n      if (city.length && code.slice(2, 4) === '00') {\n        code = city[0].code;\n      }\n\n      picker.setColumnValues(2, this.getList('county', code.slice(0, 4)));\n      picker.setIndexes([\n        this.getIndex('province', code),\n        this.getIndex('city', code),\n        this.getIndex('county', code)\n      ]);\n    },\n\n    getValues() {\n      return this.$refs.picker ? this.$refs.picker.getValues().filter(value => !!value) : [];\n    },\n\n    getArea() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: ''\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map(item => item.name);\n\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    },\n\n    reset() {\n      this.code = '';\n      this.setValues();\n    }\n  }\n});\n</script>\n"]}]}