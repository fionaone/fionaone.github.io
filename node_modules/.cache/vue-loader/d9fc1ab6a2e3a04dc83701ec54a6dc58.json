{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/swipe/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/swipe/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport Touch from '../mixins/touch';\nimport { on, off } from '../utils/event';\n\nexport default create({\n  name: 'swipe',\n\n  mixins: [Touch],\n\n  props: {\n    width: Number,\n    height: Number,\n    autoplay: Number,\n    vertical: Boolean,\n    loop: {\n      type: Boolean,\n      default: true\n    },\n    touchable: {\n      type: Boolean,\n      default: true\n    },\n    initialSwipe: {\n      type: Number,\n      default: 0\n    },\n    showIndicators: {\n      type: Boolean,\n      default: true\n    },\n    duration: {\n      type: Number,\n      default: 500\n    }\n  },\n\n  data() {\n    return {\n      computedWidth: 0,\n      computedHeight: 0,\n      offset: 0,\n      active: 0,\n      deltaX: 0,\n      deltaY: 0,\n      swipes: [],\n      swiping: false\n    };\n  },\n\n  mounted() {\n    this.initialize();\n\n    if (!this.$isServer) {\n      on(window, 'resize', this.onResize, true);\n    }\n  },\n\n  destroyed() {\n    this.clear();\n\n    if (!this.$isServer) {\n      off(window, 'resize', this.onResize, true);\n    }\n  },\n\n  watch: {\n    swipes() {\n      this.initialize();\n    },\n\n    initialSwipe() {\n      this.initialize();\n    },\n\n    autoplay(autoplay) {\n      if (!autoplay) {\n        this.clear();\n      } else {\n        this.autoPlay();\n      }\n    }\n  },\n\n  computed: {\n    count() {\n      return this.swipes.length;\n    },\n\n    delta() {\n      return this.vertical ? this.deltaY : this.deltaX;\n    },\n\n    size() {\n      return this[this.vertical ? 'computedHeight' : 'computedWidth'];\n    },\n\n    trackSize() {\n      return this.count * this.size;\n    },\n\n    activeIndicator() {\n      return (this.active + this.count) % this.count;\n    },\n\n    trackStyle() {\n      const mainAxis = this.vertical ? 'height' : 'width';\n      const crossAxis = this.vertical ? 'width' : 'height';\n      return {\n        [mainAxis]: `${this.trackSize}px`,\n        [crossAxis]: this[crossAxis] ? `${this[crossAxis]}px` : '',\n        transitionDuration: `${this.swiping ? 0 : this.duration}ms`,\n        transform: `translate${this.vertical ? 'Y' : 'X'}(${this.offset}px)`\n      };\n    }\n  },\n\n  methods: {\n    // initialize swipe position\n    initialize(active = this.initialSwipe) {\n      clearTimeout(this.timer);\n      if (this.$el) {\n        const rect = this.$el.getBoundingClientRect();\n        this.computedWidth = this.width || rect.width;\n        this.computedHeight = this.height || rect.height;\n      }\n      this.swiping = true;\n      this.active = active;\n      this.offset = this.count > 1 ? -this.size * this.active : 0;\n      this.swipes.forEach(swipe => {\n        swipe.offset = 0;\n      });\n      this.autoPlay();\n    },\n\n    onResize() {\n      this.initialize(this.activeIndicator);\n    },\n\n    onTouchStart(event) {\n      if (!this.touchable) return;\n\n      this.clear();\n      this.swiping = true;\n      this.touchStart(event);\n      this.correctPosition();\n    },\n\n    onTouchMove(event) {\n      if (!this.touchable || !this.swiping) return;\n\n      this.touchMove(event);\n\n      if (\n        (this.vertical && this.direction === 'vertical') ||\n        this.direction === 'horizontal'\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.move(0, Math.min(Math.max(this.delta, -this.size), this.size));\n      }\n    },\n\n    onTouchEnd() {\n      if (!this.touchable || !this.swiping) return;\n\n      if (this.delta) {\n        const offset = this.vertical ? this.offsetY : this.offsetX;\n        this.move(offset > 50 ? (this.delta > 0 ? -1 : 1) : 0);\n      }\n\n      this.swiping = false;\n      this.autoPlay();\n    },\n\n    move(move = 0, offset = 0) {\n      const { delta, active, count, swipes, trackSize } = this;\n      const atFirst = active === 0;\n      const atLast = active === count - 1;\n      const outOfBounds = !this.loop && ((atFirst && (offset > 0 || move < 0)) || (atLast && (offset < 0 || move > 0)));\n\n      if (outOfBounds || count <= 1) {\n        return;\n      }\n\n      swipes[0].offset = (atLast && (delta < 0 || move > 0)) ? trackSize : 0;\n      swipes[count - 1].offset = (atFirst && (delta > 0 || move < 0)) ? -trackSize : 0;\n\n      if (move && active + move >= -1 && active + move <= count) {\n        this.active += move;\n      }\n\n      this.offset = offset - this.active * this.size;\n    },\n\n    swipeTo(index) {\n      this.swiping = true;\n      this.correctPosition();\n      setTimeout(() => {\n        this.swiping = false;\n        this.move(index % this.count - this.active);\n      }, 30);\n    },\n\n    correctPosition() {\n      if (this.active <= -1) {\n        this.move(this.count);\n      }\n      if (this.active >= this.count) {\n        this.move(-this.count);\n      }\n    },\n\n    clear() {\n      clearTimeout(this.timer);\n    },\n\n    autoPlay() {\n      const { autoplay } = this;\n\n      if (autoplay && this.count > 1) {\n        this.clear();\n        this.timer = setTimeout(() => {\n          this.swiping = true;\n          this.resetTouchStatus();\n          this.correctPosition();\n\n          setTimeout(() => {\n            this.swiping = false;\n            this.move(1);\n            this.autoPlay();\n          }, 30);\n        }, autoplay);\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/swipe","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <div\n      :style=\"trackStyle\"\n      :class=\"b('track')\"\n      @touchstart=\"onTouchStart\"\n      @touchmove=\"onTouchMove\"\n      @touchend=\"onTouchEnd\"\n      @touchcancel=\"onTouchEnd\"\n      @transitionend=\"$emit('change', activeIndicator)\"\n    >\n      <slot />\n    </div>\n    <slot name=\"indicator\">\n      <div\n        v-if=\"showIndicators && count > 1\"\n        :class=\"b('indicators', { vertical })\"\n      >\n        <i\n          v-for=\"index in count\"\n          :class=\"b('indicator', { active: index - 1 === activeIndicator })\"\n        />\n      </div>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport Touch from '../mixins/touch';\nimport { on, off } from '../utils/event';\n\nexport default create({\n  name: 'swipe',\n\n  mixins: [Touch],\n\n  props: {\n    width: Number,\n    height: Number,\n    autoplay: Number,\n    vertical: Boolean,\n    loop: {\n      type: Boolean,\n      default: true\n    },\n    touchable: {\n      type: Boolean,\n      default: true\n    },\n    initialSwipe: {\n      type: Number,\n      default: 0\n    },\n    showIndicators: {\n      type: Boolean,\n      default: true\n    },\n    duration: {\n      type: Number,\n      default: 500\n    }\n  },\n\n  data() {\n    return {\n      computedWidth: 0,\n      computedHeight: 0,\n      offset: 0,\n      active: 0,\n      deltaX: 0,\n      deltaY: 0,\n      swipes: [],\n      swiping: false\n    };\n  },\n\n  mounted() {\n    this.initialize();\n\n    if (!this.$isServer) {\n      on(window, 'resize', this.onResize, true);\n    }\n  },\n\n  destroyed() {\n    this.clear();\n\n    if (!this.$isServer) {\n      off(window, 'resize', this.onResize, true);\n    }\n  },\n\n  watch: {\n    swipes() {\n      this.initialize();\n    },\n\n    initialSwipe() {\n      this.initialize();\n    },\n\n    autoplay(autoplay) {\n      if (!autoplay) {\n        this.clear();\n      } else {\n        this.autoPlay();\n      }\n    }\n  },\n\n  computed: {\n    count() {\n      return this.swipes.length;\n    },\n\n    delta() {\n      return this.vertical ? this.deltaY : this.deltaX;\n    },\n\n    size() {\n      return this[this.vertical ? 'computedHeight' : 'computedWidth'];\n    },\n\n    trackSize() {\n      return this.count * this.size;\n    },\n\n    activeIndicator() {\n      return (this.active + this.count) % this.count;\n    },\n\n    trackStyle() {\n      const mainAxis = this.vertical ? 'height' : 'width';\n      const crossAxis = this.vertical ? 'width' : 'height';\n      return {\n        [mainAxis]: `${this.trackSize}px`,\n        [crossAxis]: this[crossAxis] ? `${this[crossAxis]}px` : '',\n        transitionDuration: `${this.swiping ? 0 : this.duration}ms`,\n        transform: `translate${this.vertical ? 'Y' : 'X'}(${this.offset}px)`\n      };\n    }\n  },\n\n  methods: {\n    // initialize swipe position\n    initialize(active = this.initialSwipe) {\n      clearTimeout(this.timer);\n      if (this.$el) {\n        const rect = this.$el.getBoundingClientRect();\n        this.computedWidth = this.width || rect.width;\n        this.computedHeight = this.height || rect.height;\n      }\n      this.swiping = true;\n      this.active = active;\n      this.offset = this.count > 1 ? -this.size * this.active : 0;\n      this.swipes.forEach(swipe => {\n        swipe.offset = 0;\n      });\n      this.autoPlay();\n    },\n\n    onResize() {\n      this.initialize(this.activeIndicator);\n    },\n\n    onTouchStart(event) {\n      if (!this.touchable) return;\n\n      this.clear();\n      this.swiping = true;\n      this.touchStart(event);\n      this.correctPosition();\n    },\n\n    onTouchMove(event) {\n      if (!this.touchable || !this.swiping) return;\n\n      this.touchMove(event);\n\n      if (\n        (this.vertical && this.direction === 'vertical') ||\n        this.direction === 'horizontal'\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.move(0, Math.min(Math.max(this.delta, -this.size), this.size));\n      }\n    },\n\n    onTouchEnd() {\n      if (!this.touchable || !this.swiping) return;\n\n      if (this.delta) {\n        const offset = this.vertical ? this.offsetY : this.offsetX;\n        this.move(offset > 50 ? (this.delta > 0 ? -1 : 1) : 0);\n      }\n\n      this.swiping = false;\n      this.autoPlay();\n    },\n\n    move(move = 0, offset = 0) {\n      const { delta, active, count, swipes, trackSize } = this;\n      const atFirst = active === 0;\n      const atLast = active === count - 1;\n      const outOfBounds = !this.loop && ((atFirst && (offset > 0 || move < 0)) || (atLast && (offset < 0 || move > 0)));\n\n      if (outOfBounds || count <= 1) {\n        return;\n      }\n\n      swipes[0].offset = (atLast && (delta < 0 || move > 0)) ? trackSize : 0;\n      swipes[count - 1].offset = (atFirst && (delta > 0 || move < 0)) ? -trackSize : 0;\n\n      if (move && active + move >= -1 && active + move <= count) {\n        this.active += move;\n      }\n\n      this.offset = offset - this.active * this.size;\n    },\n\n    swipeTo(index) {\n      this.swiping = true;\n      this.correctPosition();\n      setTimeout(() => {\n        this.swiping = false;\n        this.move(index % this.count - this.active);\n      }, 30);\n    },\n\n    correctPosition() {\n      if (this.active <= -1) {\n        this.move(this.count);\n      }\n      if (this.active >= this.count) {\n        this.move(-this.count);\n      }\n    },\n\n    clear() {\n      clearTimeout(this.timer);\n    },\n\n    autoPlay() {\n      const { autoplay } = this;\n\n      if (autoplay && this.count > 1) {\n        this.clear();\n        this.timer = setTimeout(() => {\n          this.swiping = true;\n          this.resetTouchStatus();\n          this.correctPosition();\n\n          setTimeout(() => {\n            this.swiping = false;\n            this.move(1);\n            this.autoPlay();\n          }, 30);\n        }, autoplay);\n      }\n    }\n  }\n});\n</script>\n"]}]}