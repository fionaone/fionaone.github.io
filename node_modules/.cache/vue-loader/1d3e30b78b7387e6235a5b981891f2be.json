{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/number-keyboard/Key.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/number-keyboard/Key.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\n\nexport default create({\n  name: 'key',\n\n  props: {\n    text: [String, Number],\n    type: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      active: false\n    };\n  },\n\n  computed: {\n    className() {\n      const types = this.type.slice(0);\n      this.active && types.push('active');\n\n      return types.map(type => this.b([type]));\n    }\n  },\n\n  methods: {\n    onFocus() {\n      this.active = true;\n      this.$emit('press', this.text);\n    },\n\n    onBlur() {\n      this.active = false;\n    }\n  }\n});\n",{"version":3,"sources":["Key.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Key.vue","sourceRoot":"node_modules/healen-x-ui/packages/number-keyboard","sourcesContent":["<template>\n  <i\n    v-text=\"text\"\n    @touchstart.stop.prevent=\"onFocus\"\n    @touchmove=\"onBlur\"\n    @touchend=\"onBlur\"\n    @touchcancel=\"onBlur\"\n    class=\"van-hairline\"\n    :class=\"[b(), className]\"\n  />\n</template>\n\n<script>\nimport create from '../utils/create';\n\nexport default create({\n  name: 'key',\n\n  props: {\n    text: [String, Number],\n    type: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      active: false\n    };\n  },\n\n  computed: {\n    className() {\n      const types = this.type.slice(0);\n      this.active && types.push('active');\n\n      return types.map(type => this.b([type]));\n    }\n  },\n\n  methods: {\n    onFocus() {\n      this.active = true;\n      this.$emit('press', this.text);\n    },\n\n    onBlur() {\n      this.active = false;\n    }\n  }\n});\n</script>\n"]}]}