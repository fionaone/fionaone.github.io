{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/field/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/field/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport { isObj } from '../utils';\n\nexport default create({\n  name: 'field',\n\n  inheritAttrs: false,\n\n  props: {\n    value: [String, Number],\n    icon: String,\n    label: String,\n    error: Boolean,\n    center: Boolean,\n    isLink: Boolean,\n    leftIcon: String,\n    readonly: Boolean,\n    required: Boolean,\n    clearable: Boolean,\n    labelAlign: String,\n    inputAlign: String,\n    onIconClick: Function,\n    autosize: [Boolean, Object],\n    errorMessage: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    border: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      focused: false\n    };\n  },\n\n  watch: {\n    value() {\n      this.$nextTick(this.adjustSize);\n    }\n  },\n\n  mounted() {\n    this.format();\n    this.$nextTick(this.adjustSize);\n  },\n\n  computed: {\n    showClear() {\n      return this.clearable && this.focused && this.value !== '' && this.isDef(this.value) && !this.readonly;\n    },\n\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.onInput,\n        keypress: this.onKeypress,\n        focus: this.onFocus,\n        blur: this.onBlur\n      };\n    }\n  },\n\n  methods: {\n    focus() {\n      this.$refs.input && this.$refs.input.focus();\n    },\n\n    blur() {\n      this.$refs.input && this.$refs.input.blur();\n    },\n\n    // native maxlength not work when type = number\n    format(target = this.$refs.input) {\n      let { value } = target;\n      const { maxlength } = this.$attrs;\n\n      if (this.isDef(maxlength) && value.length > maxlength) {\n        value = value.slice(0, maxlength);\n        target.value = value;\n      }\n\n      return value;\n    },\n\n    onInput(event) {\n      this.$emit('input', this.format(event.target));\n    },\n\n    onFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n\n      // hack for safari\n      /* istanbul ignore if */\n      if (this.readonly) {\n        this.blur();\n      }\n    },\n\n    onBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n    },\n\n    onClickIcon() {\n      this.$emit('click-icon');\n      this.onIconClick && this.onIconClick();\n    },\n\n    onClear() {\n      this.$emit('input', '');\n      this.$emit('clear');\n    },\n\n    onKeypress(event) {\n      if (this.type === 'number') {\n        const { keyCode } = event;\n        const allowPoint = String(this.value).indexOf('.') === -1;\n        const isValidKey = (keyCode >= 48 && keyCode <= 57) || (keyCode === 46 && allowPoint) || keyCode === 45;\n        if (!isValidKey) {\n          event.preventDefault();\n        }\n      }\n\n      // trigger blur after click keyboard search button\n      /* istanbul ignore next */\n      if (this.type === 'search' && event.keyCode === 13) {\n        this.blur();\n      }\n\n      this.$emit('keypress', event);\n    },\n\n    adjustSize() {\n      const { input } = this.$refs;\n      if (!(this.type === 'textarea' && this.autosize) || !input) {\n        return;\n      }\n\n      input.style.height = 'auto';\n\n      let height = input.scrollHeight;\n      if (isObj(this.autosize)) {\n        const { maxHeight, minHeight } = this.autosize;\n        if (maxHeight) {\n          height = Math.min(height, maxHeight);\n        }\n        if (minHeight) {\n          height = Math.max(height, minHeight);\n        }\n      }\n\n      if (height) {\n        input.style.height = height + 'px';\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/field","sourcesContent":["<template>\n  <cell\n    :icon=\"leftIcon\"\n    :title=\"label\"\n    :center=\"center\"\n    :border=\"border\"\n    :is-link=\"isLink\"\n    :required=\"required\"\n    :class=\"b({\n      error,\n      disabled: $attrs.disabled,\n      [`label-${labelAlign}`]: labelAlign,\n      'min-height': type === 'textarea' && !autosize\n    })\"\n  >\n    <slot name=\"left-icon\" slot=\"icon\" />\n    <slot name=\"label\" slot=\"title\" />\n    <div :class=\"b('body')\">\n      <textarea\n        v-if=\"type === 'textarea'\"\n        v-bind=\"$attrs\"\n        v-on=\"listeners\"\n        ref=\"input\"\n        :class=\"b('control', inputAlign)\"\n        :value=\"value\"\n        :readonly=\"readonly\"\n      />\n      <input\n        v-else\n        v-bind=\"$attrs\"\n        v-on=\"listeners\"\n        ref=\"input\"\n        :class=\"b('control', inputAlign)\"\n        :type=\"type\"\n        :value=\"value\"\n        :readonly=\"readonly\"\n      >\n      <icon\n        v-if=\"showClear\"\n        name=\"clear\"\n        :class=\"b('clear')\"\n        @touchstart.prevent=\"onClear\"\n      />\n      <div v-if=\"$slots.icon || icon\" :class=\"b('icon')\" @click=\"onClickIcon\">\n        <slot name=\"icon\">\n          <icon :name=\"icon\" />\n        </slot>\n      </div>\n      <div v-if=\"$slots.button\" :class=\"b('button')\">\n        <slot name=\"button\" />\n      </div>\n    </div>\n    <div\n      v-if=\"errorMessage\"\n      v-text=\"errorMessage\"\n      :class=\"b('error-message')\"\n    />\n  </cell>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport { isObj } from '../utils';\n\nexport default create({\n  name: 'field',\n\n  inheritAttrs: false,\n\n  props: {\n    value: [String, Number],\n    icon: String,\n    label: String,\n    error: Boolean,\n    center: Boolean,\n    isLink: Boolean,\n    leftIcon: String,\n    readonly: Boolean,\n    required: Boolean,\n    clearable: Boolean,\n    labelAlign: String,\n    inputAlign: String,\n    onIconClick: Function,\n    autosize: [Boolean, Object],\n    errorMessage: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    border: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      focused: false\n    };\n  },\n\n  watch: {\n    value() {\n      this.$nextTick(this.adjustSize);\n    }\n  },\n\n  mounted() {\n    this.format();\n    this.$nextTick(this.adjustSize);\n  },\n\n  computed: {\n    showClear() {\n      return this.clearable && this.focused && this.value !== '' && this.isDef(this.value) && !this.readonly;\n    },\n\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.onInput,\n        keypress: this.onKeypress,\n        focus: this.onFocus,\n        blur: this.onBlur\n      };\n    }\n  },\n\n  methods: {\n    focus() {\n      this.$refs.input && this.$refs.input.focus();\n    },\n\n    blur() {\n      this.$refs.input && this.$refs.input.blur();\n    },\n\n    // native maxlength not work when type = number\n    format(target = this.$refs.input) {\n      let { value } = target;\n      const { maxlength } = this.$attrs;\n\n      if (this.isDef(maxlength) && value.length > maxlength) {\n        value = value.slice(0, maxlength);\n        target.value = value;\n      }\n\n      return value;\n    },\n\n    onInput(event) {\n      this.$emit('input', this.format(event.target));\n    },\n\n    onFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n\n      // hack for safari\n      /* istanbul ignore if */\n      if (this.readonly) {\n        this.blur();\n      }\n    },\n\n    onBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n    },\n\n    onClickIcon() {\n      this.$emit('click-icon');\n      this.onIconClick && this.onIconClick();\n    },\n\n    onClear() {\n      this.$emit('input', '');\n      this.$emit('clear');\n    },\n\n    onKeypress(event) {\n      if (this.type === 'number') {\n        const { keyCode } = event;\n        const allowPoint = String(this.value).indexOf('.') === -1;\n        const isValidKey = (keyCode >= 48 && keyCode <= 57) || (keyCode === 46 && allowPoint) || keyCode === 45;\n        if (!isValidKey) {\n          event.preventDefault();\n        }\n      }\n\n      // trigger blur after click keyboard search button\n      /* istanbul ignore next */\n      if (this.type === 'search' && event.keyCode === 13) {\n        this.blur();\n      }\n\n      this.$emit('keypress', event);\n    },\n\n    adjustSize() {\n      const { input } = this.$refs;\n      if (!(this.type === 'textarea' && this.autosize) || !input) {\n        return;\n      }\n\n      input.style.height = 'auto';\n\n      let height = input.scrollHeight;\n      if (isObj(this.autosize)) {\n        const { maxHeight, minHeight } = this.autosize;\n        if (maxHeight) {\n          height = Math.min(height, maxHeight);\n        }\n        if (minHeight) {\n          height = Math.max(height, minHeight);\n        }\n      }\n\n      if (height) {\n        input.style.height = height + 'px';\n      }\n    }\n  }\n});\n</script>\n"]}]}