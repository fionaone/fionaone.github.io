{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/picker/PickerColumn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/picker/PickerColumn.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport deepClone from '../utils/deep-clone';\nimport { isObj, range } from '../utils';\n\nconst DEFAULT_DURATION = 200;\n\nexport default create({\n  name: 'picker-column',\n\n  props: {\n    valueKey: String,\n    className: String,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    initialOptions: {\n      type: Array,\n      default: () => []\n    },\n    defaultIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data() {\n    return {\n      startY: 0,\n      offset: 0,\n      duration: 0,\n      startOffset: 0,\n      options: deepClone(this.initialOptions),\n      currentIndex: this.defaultIndex\n    };\n  },\n\n  created() {\n    this.$parent.children && this.$parent.children.push(this);\n    this.setIndex(this.currentIndex);\n  },\n\n  destroyed() {\n    const { children } = this.$parent;\n    children && children.splice(children.indexOf(this), 1);\n  },\n\n  watch: {\n    defaultIndex() {\n      this.setIndex(this.defaultIndex);\n    }\n  },\n\n  computed: {\n    count() {\n      return this.options.length;\n    },\n\n    baseOffset() {\n      return this.itemHeight * (this.visibleItemCount - 1) / 2;\n    },\n\n    columnStyle() {\n      return {\n        height: this.itemHeight * this.visibleItemCount + 'px'\n      };\n    },\n\n    wrapperStyle() {\n      return {\n        transition: `${this.duration}ms`,\n        transform: `translate3d(0, ${this.offset + this.baseOffset}px, 0)`,\n        lineHeight: this.itemHeight + 'px'\n      };\n    },\n\n    optionStyle() {\n      return {\n        height: this.itemHeight + 'px'\n      };\n    }\n  },\n\n  methods: {\n    onTouchStart(event) {\n      this.startY = event.touches[0].clientY;\n      this.startOffset = this.offset;\n      this.duration = 0;\n    },\n\n    onTouchMove(event) {\n      const deltaY = event.touches[0].clientY - this.startY;\n      this.offset = range(\n        this.startOffset + deltaY,\n        -(this.count * this.itemHeight),\n        this.itemHeight\n      );\n    },\n\n    onTouchEnd() {\n      if (this.offset !== this.startOffset) {\n        this.duration = DEFAULT_DURATION;\n        const index = range(\n          Math.round(-this.offset / this.itemHeight),\n          0,\n          this.count - 1\n        );\n        this.setIndex(index, true);\n      }\n    },\n\n    adjustIndex(index) {\n      index = range(index, 0, this.count);\n      for (let i = index; i < this.count; i++) {\n        if (!this.isDisabled(this.options[i])) return i;\n      }\n      for (let i = index - 1; i >= 0; i--) {\n        if (!this.isDisabled(this.options[i])) return i;\n      }\n    },\n\n    isDisabled(option) {\n      return isObj(option) && option.disabled;\n    },\n\n    getOptionText(option) {\n      return isObj(option) && this.valueKey in option\n        ? option[this.valueKey]\n        : option;\n    },\n\n    setIndex(index, userAction) {\n      index = this.adjustIndex(index) || 0;\n      this.offset = -index * this.itemHeight;\n\n      if (index !== this.currentIndex) {\n        this.currentIndex = index;\n        userAction && this.$emit('change', index);\n      }\n    },\n\n    setValue(value) {\n      const { options } = this;\n      for (let i = 0; i < options.length; i++) {\n        if (this.getOptionText(options[i]) === value) {\n          return this.setIndex(i);\n        }\n      }\n    },\n\n    getValue() {\n      return this.options[this.currentIndex];\n    }\n  }\n});\n",{"version":3,"sources":["PickerColumn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"PickerColumn.vue","sourceRoot":"node_modules/healen-x-ui/packages/picker","sourcesContent":["\n<template>\n  <div\n    :class=\"[b(), className]\"\n    :style=\"columnStyle\"\n    @touchstart=\"onTouchStart\"\n    @touchmove.prevent=\"onTouchMove\"\n    @touchend=\"onTouchEnd\"\n    @touchcancel=\"onTouchEnd\"\n  >\n    <ul :style=\"wrapperStyle\">\n      <li\n        v-for=\"(option, index) in options\"\n        v-html=\"getOptionText(option)\"\n        :style=\"optionStyle\"\n        class=\"x-ellipsis\"\n        :class=\"b('item', {\n          disabled: isDisabled(option),\n          selected: index === currentIndex\n        })\"\n        @click=\"setIndex(index, true)\"\n      />\n    </ul>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport deepClone from '../utils/deep-clone';\nimport { isObj, range } from '../utils';\n\nconst DEFAULT_DURATION = 200;\n\nexport default create({\n  name: 'picker-column',\n\n  props: {\n    valueKey: String,\n    className: String,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    initialOptions: {\n      type: Array,\n      default: () => []\n    },\n    defaultIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data() {\n    return {\n      startY: 0,\n      offset: 0,\n      duration: 0,\n      startOffset: 0,\n      options: deepClone(this.initialOptions),\n      currentIndex: this.defaultIndex\n    };\n  },\n\n  created() {\n    this.$parent.children && this.$parent.children.push(this);\n    this.setIndex(this.currentIndex);\n  },\n\n  destroyed() {\n    const { children } = this.$parent;\n    children && children.splice(children.indexOf(this), 1);\n  },\n\n  watch: {\n    defaultIndex() {\n      this.setIndex(this.defaultIndex);\n    }\n  },\n\n  computed: {\n    count() {\n      return this.options.length;\n    },\n\n    baseOffset() {\n      return this.itemHeight * (this.visibleItemCount - 1) / 2;\n    },\n\n    columnStyle() {\n      return {\n        height: this.itemHeight * this.visibleItemCount + 'px'\n      };\n    },\n\n    wrapperStyle() {\n      return {\n        transition: `${this.duration}ms`,\n        transform: `translate3d(0, ${this.offset + this.baseOffset}px, 0)`,\n        lineHeight: this.itemHeight + 'px'\n      };\n    },\n\n    optionStyle() {\n      return {\n        height: this.itemHeight + 'px'\n      };\n    }\n  },\n\n  methods: {\n    onTouchStart(event) {\n      this.startY = event.touches[0].clientY;\n      this.startOffset = this.offset;\n      this.duration = 0;\n    },\n\n    onTouchMove(event) {\n      const deltaY = event.touches[0].clientY - this.startY;\n      this.offset = range(\n        this.startOffset + deltaY,\n        -(this.count * this.itemHeight),\n        this.itemHeight\n      );\n    },\n\n    onTouchEnd() {\n      if (this.offset !== this.startOffset) {\n        this.duration = DEFAULT_DURATION;\n        const index = range(\n          Math.round(-this.offset / this.itemHeight),\n          0,\n          this.count - 1\n        );\n        this.setIndex(index, true);\n      }\n    },\n\n    adjustIndex(index) {\n      index = range(index, 0, this.count);\n      for (let i = index; i < this.count; i++) {\n        if (!this.isDisabled(this.options[i])) return i;\n      }\n      for (let i = index - 1; i >= 0; i--) {\n        if (!this.isDisabled(this.options[i])) return i;\n      }\n    },\n\n    isDisabled(option) {\n      return isObj(option) && option.disabled;\n    },\n\n    getOptionText(option) {\n      return isObj(option) && this.valueKey in option\n        ? option[this.valueKey]\n        : option;\n    },\n\n    setIndex(index, userAction) {\n      index = this.adjustIndex(index) || 0;\n      this.offset = -index * this.itemHeight;\n\n      if (index !== this.currentIndex) {\n        this.currentIndex = index;\n        userAction && this.$emit('change', index);\n      }\n    },\n\n    setValue(value) {\n      const { options } = this;\n      for (let i = 0; i < options.length; i++) {\n        if (this.getOptionText(options[i]) === value) {\n          return this.setIndex(i);\n        }\n      }\n    },\n\n    getValue() {\n      return this.options[this.currentIndex];\n    }\n  }\n});\n</script>\n"]}]}