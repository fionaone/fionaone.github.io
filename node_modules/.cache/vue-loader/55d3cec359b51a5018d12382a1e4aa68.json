{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/tabs/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/tabs/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport { raf } from '../utils/raf';\nimport { on, off } from '../utils/event';\nimport scrollUtils from '../utils/scroll';\nimport Touch from '../mixins/touch';\n\nexport default create({\n  name: 'tabs',\n\n  mixins: [Touch],\n\n  model: {\n    prop: 'active'\n  },\n\n  props: {\n    color: String,\n    sticky: Boolean,\n    lineWidth: Number,\n    swipeable: Boolean,\n    active: {\n      type: [Number, String],\n      default: 0\n    },\n    type: {\n      type: String,\n      default: 'line'\n    },\n    duration: {\n      type: Number,\n      default: 0.2\n    },\n    swipeThreshold: {\n      type: Number,\n      default: 4\n    },\n    offsetTop: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data() {\n    return {\n      tabs: [],\n      position: '',\n      curActive: null,\n      lineStyle: {},\n      events: {\n        resize: false,\n        sticky: false,\n        swipeable: false\n      }\n    };\n  },\n\n  computed: {\n    // whether the nav is scrollable\n    scrollable() {\n      return this.tabs.length > this.swipeThreshold;\n    },\n\n    wrapStyle() {\n      switch (this.position) {\n        case 'top':\n          return {\n            top: this.offsetTop + 'px',\n            position: 'fixed'\n          };\n        case 'bottom':\n          return {\n            top: 'auto',\n            bottom: 0\n          };\n        default:\n          return null;\n      }\n    },\n\n    navStyle() {\n      return {\n        borderColor: this.color\n      };\n    }\n  },\n\n  watch: {\n    active(val) {\n      if (val !== this.curActive) {\n        this.correctActive(val);\n      }\n    },\n\n    color() {\n      this.setLine();\n    },\n\n    tabs(tabs) {\n      this.correctActive(this.curActive || this.active);\n      this.scrollIntoView();\n      this.setLine();\n    },\n\n    curActive() {\n      this.scrollIntoView();\n      this.setLine();\n\n      // scroll to correct position\n      if (this.position === 'page-top' || this.position === 'content-bottom') {\n        scrollUtils.setScrollTop(window, scrollUtils.getElementTop(this.$el));\n      }\n    },\n\n    sticky() {\n      this.handlers(true);\n    },\n\n    swipeable() {\n      this.handlers(true);\n    }\n  },\n\n  mounted() {\n    this.correctActive(this.active);\n    this.setLine();\n\n    this.$nextTick(() => {\n      this.handlers(true);\n      this.scrollIntoView(true);\n    });\n  },\n\n  activated() {\n    this.$nextTick(() => {\n      this.handlers(true);\n      this.scrollIntoView(true);\n    });\n  },\n\n  deactivated() {\n    this.handlers(false);\n  },\n\n  beforeDestroy() {\n    this.handlers(false);\n  },\n\n  methods: {\n    // whether to bind sticky listener\n    handlers(bind) {\n      const { events } = this;\n      const sticky = this.sticky && bind;\n      const swipeable = this.swipeable && bind;\n\n      // listen to window resize event\n      if (events.resize !== bind) {\n        events.resize = bind;\n        (bind ? on : off)(window, 'resize', this.setLine, true);\n      }\n\n      // listen to scroll event\n      if (events.sticky !== sticky) {\n        events.sticky = sticky;\n        this.scrollEl = this.scrollEl || scrollUtils.getScrollEventTarget(this.$el);\n        (sticky ? on : off)(this.scrollEl, 'scroll', this.onScroll, true);\n        this.onScroll();\n      }\n\n      // listen to touch event\n      if (events.swipeable !== swipeable) {\n        events.swipeable = swipeable;\n        const { content } = this.$refs;\n        const action = swipeable ? on : off;\n\n        action(content, 'touchstart', this.touchStart);\n        action(content, 'touchmove', this.touchMove);\n        action(content, 'touchend', this.onTouchEnd);\n        action(content, 'touchcancel', this.onTouchEnd);\n      }\n    },\n\n    // watch swipe touch end\n    onTouchEnd() {\n      const { direction, deltaX, curActive } = this;\n      const minSwipeDistance = 50;\n\n      /* istanbul ignore else */\n      if (direction === 'horizontal' && this.offsetX >= minSwipeDistance) {\n        /* istanbul ignore else */\n        if (deltaX > 0 && curActive !== 0) {\n          this.setCurActive(curActive - 1);\n        } else if (deltaX < 0 && curActive !== this.tabs.length - 1) {\n          this.setCurActive(curActive + 1);\n        }\n      }\n    },\n\n    // adjust tab position\n    onScroll() {\n      const scrollTop = scrollUtils.getScrollTop(window) + this.offsetTop;\n      const elTopToPageTop = scrollUtils.getElementTop(this.$el);\n      const elBottomToPageTop = elTopToPageTop + this.$el.offsetHeight - this.$refs.wrap.offsetHeight;\n      if (scrollTop > elBottomToPageTop) {\n        this.position = 'bottom';\n      } else if (scrollTop > elTopToPageTop) {\n        this.position = 'top';\n      } else {\n        this.position = '';\n      }\n      const scrollParams = {\n        scrollTop,\n        isFixed: this.position === 'top'\n      };\n      this.$emit('scroll', scrollParams);\n    },\n\n    // update nav bar style\n    setLine() {\n      this.$nextTick(() => {\n        if (!this.$refs.tabs || this.type !== 'line') {\n          return;\n        }\n\n        const tab = this.$refs.tabs[this.curActive];\n        const width = this.lineWidth || (tab.offsetWidth / 2);\n        const left = tab.offsetLeft + (tab.offsetWidth - width) / 2;\n\n        this.lineStyle = {\n          width: `${width}px`,\n          backgroundColor: this.color,\n          transform: `translateX(${left}px)`,\n          transitionDuration: `${this.duration}s`\n        };\n      });\n    },\n\n    // correct the value of active\n    correctActive(active) {\n      active = +active;\n      const exist = this.tabs.some(tab => tab.index === active);\n      const defaultActive = (this.tabs[0] || {}).index || 0;\n      this.setCurActive(exist ? active : defaultActive);\n    },\n\n    setCurActive(active) {\n      active = this.findAvailableTab(active, active < this.curActive);\n      if (this.isDef(active) && active !== this.curActive) {\n        this.$emit('input', active);\n\n        if (this.curActive !== null) {\n          this.$emit('change', active, this.tabs[active].title);\n        }\n        this.curActive = active;\n      }\n    },\n\n    findAvailableTab(active, reverse) {\n      const diff = reverse ? -1 : 1;\n      let index = active;\n\n      while (index >= 0 && index < this.tabs.length) {\n        if (!this.tabs[index].disabled) {\n          return index;\n        }\n        index += diff;\n      }\n\n      return active;\n    },\n\n    // emit event when clicked\n    onClick(index) {\n      const { title, disabled } = this.tabs[index];\n      if (disabled) {\n        this.$emit('disabled', index, title);\n      } else {\n        this.setCurActive(index);\n        this.$emit('click', index, title);\n      }\n    },\n\n    // scroll active tab into view\n    scrollIntoView(immediate) {\n      if (!this.scrollable || !this.$refs.tabs) {\n        return;\n      }\n\n      const tab = this.$refs.tabs[this.curActive];\n      const { nav } = this.$refs;\n      const { scrollLeft, offsetWidth: navWidth } = nav;\n      const { offsetLeft, offsetWidth: tabWidth } = tab;\n\n      this.scrollTo(nav, scrollLeft, offsetLeft - (navWidth - tabWidth) / 2, immediate);\n    },\n\n    // animate the scrollLeft of nav\n    scrollTo(el, from, to, immediate) {\n      if (immediate) {\n        el.scrollLeft += to - from;\n        return;\n      }\n\n      let count = 0;\n      const frames = Math.round(this.duration * 1000 / 16);\n      const animate = () => {\n        el.scrollLeft += (to - from) / frames;\n        /* istanbul ignore next */\n        if (++count < frames) {\n          raf(animate);\n        }\n      };\n      animate();\n    },\n\n    // render title slot of child tab\n    renderTitle(el, index) {\n      this.$nextTick(() => {\n        const title = this.$refs.title[index];\n        title.parentNode.replaceChild(el, title);\n      });\n    },\n\n    getTabStyle(item, index) {\n      const style = {};\n      const { color } = this;\n      const active = index === this.curActive;\n      const isCard = this.type === 'card';\n\n      if (color) {\n        if (!item.disabled && isCard !== active) {\n          style.color = color;\n        }\n        if (!item.disabled && isCard && active) {\n          style.backgroundColor = color;\n        }\n        if (isCard) {\n          style.borderColor = color;\n        }\n      }\n\n      return style;\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/tabs","sourcesContent":["<template>\n  <div :class=\"b([type])\">\n    <div\n      ref=\"wrap\"\n      :style=\"wrapStyle\"\n      :class=\"[\n        b('wrap', { scrollable }),\n        { 'x-hairline--top-bottom': type === 'line' }\n      ]\"\n    >\n      <div :class=\"b('nav', [type])\" ref=\"nav\" :style=\"navStyle\">\n        <div v-if=\"type === 'line'\" :class=\"b('line')\" :style=\"lineStyle\" />\n        <div\n          v-for=\"(tab, index) in tabs\"\n          ref=\"tabs\"\n          class=\"x-tab\"\n          :class=\"{\n            'x-tab--active': index === curActive,\n            'x-tab--disabled': tab.disabled\n          }\"\n          :style=\"getTabStyle(tab, index)\"\n          @click=\"onClick(index)\"\n        >\n          <span class=\"x-ellipsis\" ref=\"title\">{{ tab.title }}</span>\n        </div>\n      </div>\n    </div>\n    <div :class=\"b('content')\" ref=\"content\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport { raf } from '../utils/raf';\nimport { on, off } from '../utils/event';\nimport scrollUtils from '../utils/scroll';\nimport Touch from '../mixins/touch';\n\nexport default create({\n  name: 'tabs',\n\n  mixins: [Touch],\n\n  model: {\n    prop: 'active'\n  },\n\n  props: {\n    color: String,\n    sticky: Boolean,\n    lineWidth: Number,\n    swipeable: Boolean,\n    active: {\n      type: [Number, String],\n      default: 0\n    },\n    type: {\n      type: String,\n      default: 'line'\n    },\n    duration: {\n      type: Number,\n      default: 0.2\n    },\n    swipeThreshold: {\n      type: Number,\n      default: 4\n    },\n    offsetTop: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data() {\n    return {\n      tabs: [],\n      position: '',\n      curActive: null,\n      lineStyle: {},\n      events: {\n        resize: false,\n        sticky: false,\n        swipeable: false\n      }\n    };\n  },\n\n  computed: {\n    // whether the nav is scrollable\n    scrollable() {\n      return this.tabs.length > this.swipeThreshold;\n    },\n\n    wrapStyle() {\n      switch (this.position) {\n        case 'top':\n          return {\n            top: this.offsetTop + 'px',\n            position: 'fixed'\n          };\n        case 'bottom':\n          return {\n            top: 'auto',\n            bottom: 0\n          };\n        default:\n          return null;\n      }\n    },\n\n    navStyle() {\n      return {\n        borderColor: this.color\n      };\n    }\n  },\n\n  watch: {\n    active(val) {\n      if (val !== this.curActive) {\n        this.correctActive(val);\n      }\n    },\n\n    color() {\n      this.setLine();\n    },\n\n    tabs(tabs) {\n      this.correctActive(this.curActive || this.active);\n      this.scrollIntoView();\n      this.setLine();\n    },\n\n    curActive() {\n      this.scrollIntoView();\n      this.setLine();\n\n      // scroll to correct position\n      if (this.position === 'page-top' || this.position === 'content-bottom') {\n        scrollUtils.setScrollTop(window, scrollUtils.getElementTop(this.$el));\n      }\n    },\n\n    sticky() {\n      this.handlers(true);\n    },\n\n    swipeable() {\n      this.handlers(true);\n    }\n  },\n\n  mounted() {\n    this.correctActive(this.active);\n    this.setLine();\n\n    this.$nextTick(() => {\n      this.handlers(true);\n      this.scrollIntoView(true);\n    });\n  },\n\n  activated() {\n    this.$nextTick(() => {\n      this.handlers(true);\n      this.scrollIntoView(true);\n    });\n  },\n\n  deactivated() {\n    this.handlers(false);\n  },\n\n  beforeDestroy() {\n    this.handlers(false);\n  },\n\n  methods: {\n    // whether to bind sticky listener\n    handlers(bind) {\n      const { events } = this;\n      const sticky = this.sticky && bind;\n      const swipeable = this.swipeable && bind;\n\n      // listen to window resize event\n      if (events.resize !== bind) {\n        events.resize = bind;\n        (bind ? on : off)(window, 'resize', this.setLine, true);\n      }\n\n      // listen to scroll event\n      if (events.sticky !== sticky) {\n        events.sticky = sticky;\n        this.scrollEl = this.scrollEl || scrollUtils.getScrollEventTarget(this.$el);\n        (sticky ? on : off)(this.scrollEl, 'scroll', this.onScroll, true);\n        this.onScroll();\n      }\n\n      // listen to touch event\n      if (events.swipeable !== swipeable) {\n        events.swipeable = swipeable;\n        const { content } = this.$refs;\n        const action = swipeable ? on : off;\n\n        action(content, 'touchstart', this.touchStart);\n        action(content, 'touchmove', this.touchMove);\n        action(content, 'touchend', this.onTouchEnd);\n        action(content, 'touchcancel', this.onTouchEnd);\n      }\n    },\n\n    // watch swipe touch end\n    onTouchEnd() {\n      const { direction, deltaX, curActive } = this;\n      const minSwipeDistance = 50;\n\n      /* istanbul ignore else */\n      if (direction === 'horizontal' && this.offsetX >= minSwipeDistance) {\n        /* istanbul ignore else */\n        if (deltaX > 0 && curActive !== 0) {\n          this.setCurActive(curActive - 1);\n        } else if (deltaX < 0 && curActive !== this.tabs.length - 1) {\n          this.setCurActive(curActive + 1);\n        }\n      }\n    },\n\n    // adjust tab position\n    onScroll() {\n      const scrollTop = scrollUtils.getScrollTop(window) + this.offsetTop;\n      const elTopToPageTop = scrollUtils.getElementTop(this.$el);\n      const elBottomToPageTop = elTopToPageTop + this.$el.offsetHeight - this.$refs.wrap.offsetHeight;\n      if (scrollTop > elBottomToPageTop) {\n        this.position = 'bottom';\n      } else if (scrollTop > elTopToPageTop) {\n        this.position = 'top';\n      } else {\n        this.position = '';\n      }\n      const scrollParams = {\n        scrollTop,\n        isFixed: this.position === 'top'\n      };\n      this.$emit('scroll', scrollParams);\n    },\n\n    // update nav bar style\n    setLine() {\n      this.$nextTick(() => {\n        if (!this.$refs.tabs || this.type !== 'line') {\n          return;\n        }\n\n        const tab = this.$refs.tabs[this.curActive];\n        const width = this.lineWidth || (tab.offsetWidth / 2);\n        const left = tab.offsetLeft + (tab.offsetWidth - width) / 2;\n\n        this.lineStyle = {\n          width: `${width}px`,\n          backgroundColor: this.color,\n          transform: `translateX(${left}px)`,\n          transitionDuration: `${this.duration}s`\n        };\n      });\n    },\n\n    // correct the value of active\n    correctActive(active) {\n      active = +active;\n      const exist = this.tabs.some(tab => tab.index === active);\n      const defaultActive = (this.tabs[0] || {}).index || 0;\n      this.setCurActive(exist ? active : defaultActive);\n    },\n\n    setCurActive(active) {\n      active = this.findAvailableTab(active, active < this.curActive);\n      if (this.isDef(active) && active !== this.curActive) {\n        this.$emit('input', active);\n\n        if (this.curActive !== null) {\n          this.$emit('change', active, this.tabs[active].title);\n        }\n        this.curActive = active;\n      }\n    },\n\n    findAvailableTab(active, reverse) {\n      const diff = reverse ? -1 : 1;\n      let index = active;\n\n      while (index >= 0 && index < this.tabs.length) {\n        if (!this.tabs[index].disabled) {\n          return index;\n        }\n        index += diff;\n      }\n\n      return active;\n    },\n\n    // emit event when clicked\n    onClick(index) {\n      const { title, disabled } = this.tabs[index];\n      if (disabled) {\n        this.$emit('disabled', index, title);\n      } else {\n        this.setCurActive(index);\n        this.$emit('click', index, title);\n      }\n    },\n\n    // scroll active tab into view\n    scrollIntoView(immediate) {\n      if (!this.scrollable || !this.$refs.tabs) {\n        return;\n      }\n\n      const tab = this.$refs.tabs[this.curActive];\n      const { nav } = this.$refs;\n      const { scrollLeft, offsetWidth: navWidth } = nav;\n      const { offsetLeft, offsetWidth: tabWidth } = tab;\n\n      this.scrollTo(nav, scrollLeft, offsetLeft - (navWidth - tabWidth) / 2, immediate);\n    },\n\n    // animate the scrollLeft of nav\n    scrollTo(el, from, to, immediate) {\n      if (immediate) {\n        el.scrollLeft += to - from;\n        return;\n      }\n\n      let count = 0;\n      const frames = Math.round(this.duration * 1000 / 16);\n      const animate = () => {\n        el.scrollLeft += (to - from) / frames;\n        /* istanbul ignore next */\n        if (++count < frames) {\n          raf(animate);\n        }\n      };\n      animate();\n    },\n\n    // render title slot of child tab\n    renderTitle(el, index) {\n      this.$nextTick(() => {\n        const title = this.$refs.title[index];\n        title.parentNode.replaceChild(el, title);\n      });\n    },\n\n    getTabStyle(item, index) {\n      const style = {};\n      const { color } = this;\n      const active = index === this.curActive;\n      const isCard = this.type === 'card';\n\n      if (color) {\n        if (!item.disabled && isCard !== active) {\n          style.color = color;\n        }\n        if (!item.disabled && isCard && active) {\n          style.backgroundColor = color;\n        }\n        if (isCard) {\n          style.borderColor = color;\n        }\n      }\n\n      return style;\n    }\n  }\n});\n</script>\n"]}]}