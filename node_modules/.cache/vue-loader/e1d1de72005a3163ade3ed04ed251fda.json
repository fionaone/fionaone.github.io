{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/slider/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/slider/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport Touch from '../mixins/touch';\n\nexport default create({\n  name: 'slider',\n\n  mixins: [Touch],\n\n  props: {\n    disabled: Boolean,\n    max: {\n      type: Number,\n      default: 100\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    barHeight: {\n      type: String,\n      default: '2px'\n    }\n  },\n\n  computed: {\n    barStyle() {\n      return {\n        width: this.format(this.value) + '%',\n        height: this.barHeight\n      };\n    }\n  },\n\n  methods: {\n    onTouchStart(event) {\n      if (this.disabled) return;\n\n      this.touchStart(event);\n      this.startValue = this.format(this.value);\n    },\n\n    onTouchMove(event) {\n      if (this.disabled) return;\n\n      this.touchMove(event);\n      const rect = this.$el.getBoundingClientRect();\n      const diff = this.deltaX / rect.width * 100;\n      this.updateValue(this.startValue + diff);\n    },\n\n    onTouchEnd() {\n      if (this.disabled) return;\n      this.updateValue(this.value, true);\n    },\n\n    onClick(event) {\n      if (this.disabled) return;\n\n      const rect = this.$el.getBoundingClientRect();\n      const value = (event.clientX - rect.left) / rect.width * 100;\n      this.updateValue(value, true);\n    },\n\n    updateValue(value, end) {\n      value = this.format(value);\n      this.$emit('input', value);\n\n      if (end) {\n        this.$emit('change', value);\n      }\n    },\n\n    format(value) {\n      return (Math.round(Math.max(this.min, Math.min(value, this.max)) / this.step) * this.step);\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/slider","sourcesContent":["<template>\n  <div :class=\"b({ disabled })\" @click.stop=\"onClick\">\n    <div :class=\"b('bar')\" :style=\"barStyle\">\n      <span\n        :class=\"b('button')\"\n        @touchstart=\"onTouchStart\"\n        @touchmove.prevent.stop=\"onTouchMove\"\n        @touchend=\"onTouchEnd\"\n        @touchcancel=\"onTouchEnd\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport Touch from '../mixins/touch';\n\nexport default create({\n  name: 'slider',\n\n  mixins: [Touch],\n\n  props: {\n    disabled: Boolean,\n    max: {\n      type: Number,\n      default: 100\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    barHeight: {\n      type: String,\n      default: '2px'\n    }\n  },\n\n  computed: {\n    barStyle() {\n      return {\n        width: this.format(this.value) + '%',\n        height: this.barHeight\n      };\n    }\n  },\n\n  methods: {\n    onTouchStart(event) {\n      if (this.disabled) return;\n\n      this.touchStart(event);\n      this.startValue = this.format(this.value);\n    },\n\n    onTouchMove(event) {\n      if (this.disabled) return;\n\n      this.touchMove(event);\n      const rect = this.$el.getBoundingClientRect();\n      const diff = this.deltaX / rect.width * 100;\n      this.updateValue(this.startValue + diff);\n    },\n\n    onTouchEnd() {\n      if (this.disabled) return;\n      this.updateValue(this.value, true);\n    },\n\n    onClick(event) {\n      if (this.disabled) return;\n\n      const rect = this.$el.getBoundingClientRect();\n      const value = (event.clientX - rect.left) / rect.width * 100;\n      this.updateValue(value, true);\n    },\n\n    updateValue(value, end) {\n      value = this.format(value);\n      this.$emit('input', value);\n\n      if (end) {\n        this.$emit('change', value);\n      }\n    },\n\n    format(value) {\n      return (Math.round(Math.max(this.min, Math.min(value, this.max)) / this.step) * this.step);\n    }\n  }\n});\n</script>\n"]}]}