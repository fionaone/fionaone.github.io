{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/datetime-picker/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/datetime-picker/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Picker from '../picker';\nimport create from '../utils/create';\nimport { range } from '../utils';\n\nconst currentYear = new Date().getFullYear();\nconst isValidDate = date => Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());\n\nexport default create({\n  name: 'datetime-picker',\n\n  components: {\n    Picker\n  },\n\n  props: {\n    value: {},\n    title: String,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    confirmButtonText: String,\n    cancelButtonText: String,\n    type: {\n      type: String,\n      default: 'datetime'\n    },\n    showToolbar: {\n      type: Boolean,\n      default: true\n    },\n    format: {\n      type: String,\n      default: 'YYYY.MM.DD HH时 mm分'\n    },\n    formatter: {\n      type: Function,\n      default: (type, value) => value\n    },\n    minDate: {\n      type: Date,\n      default: () => new Date(currentYear - 10, 0, 1),\n      validator: isValidDate\n    },\n    maxDate: {\n      type: Date,\n      default: () => new Date(currentYear + 10, 11, 31),\n      validator: isValidDate\n    },\n    minHour: {\n      type: Number,\n      default: 0\n    },\n    maxHour: {\n      type: Number,\n      default: 23\n    },\n    minMinute: {\n      type: Number,\n      default: 0\n    },\n    maxMinute: {\n      type: Number,\n      default: 59\n    }\n  },\n\n  data() {\n    return {\n      innerValue: this.correctValue(this.value)\n    };\n  },\n\n  watch: {\n    value(val) {\n      val = this.correctValue(val);\n      const isEqual = this.type === 'time' ? val === this.innerValue : val.valueOf() === this.innerValue.valueOf();\n      if (!isEqual) this.innerValue = val;\n    },\n\n    innerValue(val) {\n      this.$emit('input', val);\n    },\n\n    columns() {\n      this.updateColumnValue(this.innerValue);\n    }\n  },\n\n  computed: {\n    ranges() {\n      if (this.type === 'time') {\n        return [\n          {\n            type: 'hour',\n            range: [this.minHour, this.maxHour]\n          },\n          {\n            type: 'minute',\n            range: [this.minMinute, this.maxMinute]\n          }\n        ];\n      }\n\n      const { maxYear, maxDate, maxMonth, maxHour, maxMinute } = this.getBoundary('max', this.innerValue);\n      const { minYear, minDate, minMonth, minHour, minMinute } = this.getBoundary('min', this.innerValue);\n\n      const result = [\n        {\n          type: 'year',\n          range: [minYear, maxYear]\n        },\n        {\n          type: 'month',\n          range: [minMonth, maxMonth]\n        },\n        {\n          type: 'day',\n          range: [minDate, maxDate]\n        },\n        {\n          type: 'hour',\n          range: [minHour, maxHour]\n        },\n        {\n          type: 'minute',\n          range: [minMinute, maxMinute]\n        }\n      ];\n\n      if (this.type === 'date') result.splice(3, 2);\n      if (this.type === 'year-month') result.splice(2, 3);\n      return result;\n    },\n\n    columns() {\n      const results = this.ranges.map(({ type, range }) => {\n        const values = this.times(range[1] - range[0] + 1, index => {\n          let value = range[0] + index;\n          value = value < 10 ? `0${value}` : `${value}`;\n          return this.formatter(type, value);\n        });\n\n        return {\n          values\n        };\n      });\n\n      return results;\n    }\n  },\n\n  methods: {\n    pad(val) {\n      return `00${val}`.slice(-2);\n    },\n\n    correctValue(value) {\n      // validate value\n      const isDateType = this.type !== 'time';\n      if (isDateType && !isValidDate(value)) {\n        value = this.minDate;\n      } else if (!value) {\n        const { minHour } = this;\n        value = `${minHour > 10 ? minHour : '0' + minHour}:00`;\n      }\n\n      // time type\n      if (!isDateType) {\n        let [hour, minute] = value.split(':');\n        hour = this.pad(range(hour, this.minHour, this.maxHour));\n        minute = this.pad(range(minute, this.minMinute, this.maxMinute));\n\n        return `${hour}:${minute}`;\n      }\n\n      // date type\n      const { maxYear, maxDate, maxMonth, maxHour, maxMinute } = this.getBoundary('max', value);\n      const { minYear, minDate, minMonth, minHour, minMinute } = this.getBoundary('min', value);\n      const minDay = new Date(minYear, minMonth - 1, minDate, minHour, minMinute);\n      const maxDay = new Date(maxYear, maxMonth - 1, maxDate, maxHour, maxMinute);\n      value = Math.max(value, minDay);\n      value = Math.min(value, maxDay);\n\n      return new Date(value);\n    },\n\n    times(n, iteratee) {\n      let index = -1;\n      const result = Array(n);\n\n      while (++index < n) {\n        result[index] = iteratee(index);\n      }\n      return result;\n    },\n\n    getBoundary(type, value) {\n      const boundary = this[`${type}Date`];\n      const year = boundary.getFullYear();\n      let month = 1;\n      let date = 1;\n      let hour = 0;\n      let minute = 0;\n\n      if (type === 'max') {\n        month = 12;\n        date = this.getMonthEndDay(value.getFullYear(), value.getMonth() + 1);\n        hour = 23;\n        minute = 59;\n      }\n\n      if (value.getFullYear() === year) {\n        month = boundary.getMonth() + 1;\n        if (value.getMonth() + 1 === month) {\n          date = boundary.getDate();\n          if (value.getDate() === date) {\n            hour = boundary.getHours();\n            if (value.getHours() === hour) {\n              minute = boundary.getMinutes();\n            }\n          }\n        }\n      }\n\n      return {\n        [`${type}Year`]: year,\n        [`${type}Month`]: month,\n        [`${type}Date`]: date,\n        [`${type}Hour`]: hour,\n        [`${type}Minute`]: minute\n      };\n    },\n\n    getTrueValue(formattedValue) {\n      if (!formattedValue) return;\n      while (isNaN(parseInt(formattedValue, 10))) {\n        formattedValue = formattedValue.slice(1);\n      }\n      return parseInt(formattedValue, 10);\n    },\n\n    getMonthEndDay(year, month) {\n      return 32 - new Date(year, month - 1, 32).getDate();\n    },\n\n    onConfirm() {\n      this.$emit('confirm', this.innerValue);\n    },\n\n    onChange(picker) {\n      const values = picker.getValues();\n      let value;\n\n      if (this.type === 'time') {\n        value = values.join(':');\n      } else {\n        const year = this.getTrueValue(values[0]);\n        const month = this.getTrueValue(values[1]);\n        const maxDate = this.getMonthEndDay(year, month);\n        let date = this.getTrueValue(values[2]);\n        if (this.type === 'year-month') {\n          date = 1;\n        }\n        date = date > maxDate ? maxDate : date;\n        let hour = 0;\n        let minute = 0;\n        if (this.type === 'datetime') {\n          hour = this.getTrueValue(values[3]);\n          minute = this.getTrueValue(values[4]);\n        }\n        value = new Date(year, month - 1, date, hour, minute);\n      }\n      value = this.correctValue(value);\n      this.innerValue = value;\n\n      this.$nextTick(() => {\n        this.$nextTick(() => {\n          this.$emit('change', picker);\n        });\n      });\n    },\n\n    updateColumnValue(value) {\n      let values = [];\n      const { formatter, pad } = this;\n\n      if (this.type === 'time') {\n        const currentValue = value.split(':');\n        values = [\n          formatter('hour', currentValue[0]),\n          formatter('minute', currentValue[1])\n        ];\n      } else {\n        values = [\n          formatter('year', `${value.getFullYear()}`),\n          formatter('month', pad(value.getMonth() + 1)),\n          formatter('day', pad(value.getDate()))\n        ];\n        if (this.type === 'datetime') {\n          values.push(\n            formatter('hour', pad(value.getHours())),\n            formatter('minute', pad(value.getMinutes()))\n          );\n        }\n        if (this.type === 'year-month') {\n          values = values.slice(0, 2);\n        }\n      }\n\n      this.$nextTick(() => {\n        this.$refs.picker.setValues(values);\n      });\n    }\n  },\n\n  mounted() {\n    this.updateColumnValue(this.innerValue);\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/datetime-picker","sourcesContent":["<template>\n  <picker\n    ref=\"picker\"\n    :title=\"title\"\n    :columns=\"columns\"\n    :item-height=\"itemHeight\"\n    :show-toolbar=\"showToolbar\"\n    :visible-item-count=\"visibleItemCount\"\n    :confirm-button-text=\"confirmButtonText\"\n    :cancel-button-text=\"cancelButtonText\"\n    @change=\"onChange\"\n    @confirm=\"onConfirm\"\n    @cancel=\"$emit('cancel')\"\n  />\n</template>\n\n<script>\nimport Picker from '../picker';\nimport create from '../utils/create';\nimport { range } from '../utils';\n\nconst currentYear = new Date().getFullYear();\nconst isValidDate = date => Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());\n\nexport default create({\n  name: 'datetime-picker',\n\n  components: {\n    Picker\n  },\n\n  props: {\n    value: {},\n    title: String,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    confirmButtonText: String,\n    cancelButtonText: String,\n    type: {\n      type: String,\n      default: 'datetime'\n    },\n    showToolbar: {\n      type: Boolean,\n      default: true\n    },\n    format: {\n      type: String,\n      default: 'YYYY.MM.DD HH时 mm分'\n    },\n    formatter: {\n      type: Function,\n      default: (type, value) => value\n    },\n    minDate: {\n      type: Date,\n      default: () => new Date(currentYear - 10, 0, 1),\n      validator: isValidDate\n    },\n    maxDate: {\n      type: Date,\n      default: () => new Date(currentYear + 10, 11, 31),\n      validator: isValidDate\n    },\n    minHour: {\n      type: Number,\n      default: 0\n    },\n    maxHour: {\n      type: Number,\n      default: 23\n    },\n    minMinute: {\n      type: Number,\n      default: 0\n    },\n    maxMinute: {\n      type: Number,\n      default: 59\n    }\n  },\n\n  data() {\n    return {\n      innerValue: this.correctValue(this.value)\n    };\n  },\n\n  watch: {\n    value(val) {\n      val = this.correctValue(val);\n      const isEqual = this.type === 'time' ? val === this.innerValue : val.valueOf() === this.innerValue.valueOf();\n      if (!isEqual) this.innerValue = val;\n    },\n\n    innerValue(val) {\n      this.$emit('input', val);\n    },\n\n    columns() {\n      this.updateColumnValue(this.innerValue);\n    }\n  },\n\n  computed: {\n    ranges() {\n      if (this.type === 'time') {\n        return [\n          {\n            type: 'hour',\n            range: [this.minHour, this.maxHour]\n          },\n          {\n            type: 'minute',\n            range: [this.minMinute, this.maxMinute]\n          }\n        ];\n      }\n\n      const { maxYear, maxDate, maxMonth, maxHour, maxMinute } = this.getBoundary('max', this.innerValue);\n      const { minYear, minDate, minMonth, minHour, minMinute } = this.getBoundary('min', this.innerValue);\n\n      const result = [\n        {\n          type: 'year',\n          range: [minYear, maxYear]\n        },\n        {\n          type: 'month',\n          range: [minMonth, maxMonth]\n        },\n        {\n          type: 'day',\n          range: [minDate, maxDate]\n        },\n        {\n          type: 'hour',\n          range: [minHour, maxHour]\n        },\n        {\n          type: 'minute',\n          range: [minMinute, maxMinute]\n        }\n      ];\n\n      if (this.type === 'date') result.splice(3, 2);\n      if (this.type === 'year-month') result.splice(2, 3);\n      return result;\n    },\n\n    columns() {\n      const results = this.ranges.map(({ type, range }) => {\n        const values = this.times(range[1] - range[0] + 1, index => {\n          let value = range[0] + index;\n          value = value < 10 ? `0${value}` : `${value}`;\n          return this.formatter(type, value);\n        });\n\n        return {\n          values\n        };\n      });\n\n      return results;\n    }\n  },\n\n  methods: {\n    pad(val) {\n      return `00${val}`.slice(-2);\n    },\n\n    correctValue(value) {\n      // validate value\n      const isDateType = this.type !== 'time';\n      if (isDateType && !isValidDate(value)) {\n        value = this.minDate;\n      } else if (!value) {\n        const { minHour } = this;\n        value = `${minHour > 10 ? minHour : '0' + minHour}:00`;\n      }\n\n      // time type\n      if (!isDateType) {\n        let [hour, minute] = value.split(':');\n        hour = this.pad(range(hour, this.minHour, this.maxHour));\n        minute = this.pad(range(minute, this.minMinute, this.maxMinute));\n\n        return `${hour}:${minute}`;\n      }\n\n      // date type\n      const { maxYear, maxDate, maxMonth, maxHour, maxMinute } = this.getBoundary('max', value);\n      const { minYear, minDate, minMonth, minHour, minMinute } = this.getBoundary('min', value);\n      const minDay = new Date(minYear, minMonth - 1, minDate, minHour, minMinute);\n      const maxDay = new Date(maxYear, maxMonth - 1, maxDate, maxHour, maxMinute);\n      value = Math.max(value, minDay);\n      value = Math.min(value, maxDay);\n\n      return new Date(value);\n    },\n\n    times(n, iteratee) {\n      let index = -1;\n      const result = Array(n);\n\n      while (++index < n) {\n        result[index] = iteratee(index);\n      }\n      return result;\n    },\n\n    getBoundary(type, value) {\n      const boundary = this[`${type}Date`];\n      const year = boundary.getFullYear();\n      let month = 1;\n      let date = 1;\n      let hour = 0;\n      let minute = 0;\n\n      if (type === 'max') {\n        month = 12;\n        date = this.getMonthEndDay(value.getFullYear(), value.getMonth() + 1);\n        hour = 23;\n        minute = 59;\n      }\n\n      if (value.getFullYear() === year) {\n        month = boundary.getMonth() + 1;\n        if (value.getMonth() + 1 === month) {\n          date = boundary.getDate();\n          if (value.getDate() === date) {\n            hour = boundary.getHours();\n            if (value.getHours() === hour) {\n              minute = boundary.getMinutes();\n            }\n          }\n        }\n      }\n\n      return {\n        [`${type}Year`]: year,\n        [`${type}Month`]: month,\n        [`${type}Date`]: date,\n        [`${type}Hour`]: hour,\n        [`${type}Minute`]: minute\n      };\n    },\n\n    getTrueValue(formattedValue) {\n      if (!formattedValue) return;\n      while (isNaN(parseInt(formattedValue, 10))) {\n        formattedValue = formattedValue.slice(1);\n      }\n      return parseInt(formattedValue, 10);\n    },\n\n    getMonthEndDay(year, month) {\n      return 32 - new Date(year, month - 1, 32).getDate();\n    },\n\n    onConfirm() {\n      this.$emit('confirm', this.innerValue);\n    },\n\n    onChange(picker) {\n      const values = picker.getValues();\n      let value;\n\n      if (this.type === 'time') {\n        value = values.join(':');\n      } else {\n        const year = this.getTrueValue(values[0]);\n        const month = this.getTrueValue(values[1]);\n        const maxDate = this.getMonthEndDay(year, month);\n        let date = this.getTrueValue(values[2]);\n        if (this.type === 'year-month') {\n          date = 1;\n        }\n        date = date > maxDate ? maxDate : date;\n        let hour = 0;\n        let minute = 0;\n        if (this.type === 'datetime') {\n          hour = this.getTrueValue(values[3]);\n          minute = this.getTrueValue(values[4]);\n        }\n        value = new Date(year, month - 1, date, hour, minute);\n      }\n      value = this.correctValue(value);\n      this.innerValue = value;\n\n      this.$nextTick(() => {\n        this.$nextTick(() => {\n          this.$emit('change', picker);\n        });\n      });\n    },\n\n    updateColumnValue(value) {\n      let values = [];\n      const { formatter, pad } = this;\n\n      if (this.type === 'time') {\n        const currentValue = value.split(':');\n        values = [\n          formatter('hour', currentValue[0]),\n          formatter('minute', currentValue[1])\n        ];\n      } else {\n        values = [\n          formatter('year', `${value.getFullYear()}`),\n          formatter('month', pad(value.getMonth() + 1)),\n          formatter('day', pad(value.getDate()))\n        ];\n        if (this.type === 'datetime') {\n          values.push(\n            formatter('hour', pad(value.getHours())),\n            formatter('minute', pad(value.getMinutes()))\n          );\n        }\n        if (this.type === 'year-month') {\n          values = values.slice(0, 2);\n        }\n      }\n\n      this.$nextTick(() => {\n        this.$refs.picker.setValues(values);\n      });\n    }\n  },\n\n  mounted() {\n    this.updateColumnValue(this.innerValue);\n  }\n});\n</script>\n"]}]}