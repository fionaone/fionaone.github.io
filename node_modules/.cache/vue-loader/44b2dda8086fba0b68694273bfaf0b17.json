{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/checkbox/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/checkbox/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport findParent from '../mixins/find-parent';\n\nexport default create({\n  name: 'checkbox',\n\n  mixins: [findParent],\n\n  props: {\n    name: null,\n    value: null,\n    disabled: Boolean,\n    labelPosition: String,\n    labelDisabled: {\n      type: Boolean,\n      default: false\n    },\n    shape: {\n      type: String,\n      default: 'round'\n    }\n  },\n\n  computed: {\n    checked: {\n      get() {\n        return this.parent\n          ? this.parent.value.indexOf(this.name) !== -1\n          : this.value;\n      },\n\n      set(val) {\n        const { parent } = this;\n        if (parent) {\n          const parentValue = this.parent.value.slice();\n          if (val) {\n            if (parent.max && parentValue.length >= parent.max) {\n              return;\n            }\n            /* istanbul ignore else */\n            if (parentValue.indexOf(this.name) === -1) {\n              parentValue.push(this.name);\n              parent.$emit('input', parentValue);\n            }\n          } else {\n            const index = parentValue.indexOf(this.name);\n            /* istanbul ignore else */\n            if (index !== -1) {\n              parentValue.splice(index, 1);\n              parent.$emit('input', parentValue);\n            }\n          }\n        } else {\n          this.$emit('input', val);\n        }\n      }\n    },\n\n    isDisabled() {\n      return (this.parent && this.parent.disabled) || this.disabled;\n    }\n  },\n\n  watch: {\n    value(val) {\n      this.$emit('change', val);\n    }\n  },\n\n  created() {\n    this.findParent('x-checkbox-group');\n  },\n\n  methods: {\n    toggle(target) {\n      if (!this.isDisabled && !(target === 'label' && this.labelDisabled)) {\n        this.checked = !this.checked;\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/checkbox","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <div :class=\"[b('icon', [shape, { disabled: isDisabled, checked }])]\" @click=\"toggle\">\n      <slot name=\"icon\" :checked=\"checked\">\n        <icon name=\"success\" />\n      </slot>\n    </div>\n    <span v-if=\"$slots.default\" :class=\"b('label', labelPosition)\" @click=\"toggle('label')\">\n      <slot />\n    </span>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport findParent from '../mixins/find-parent';\n\nexport default create({\n  name: 'checkbox',\n\n  mixins: [findParent],\n\n  props: {\n    name: null,\n    value: null,\n    disabled: Boolean,\n    labelPosition: String,\n    labelDisabled: {\n      type: Boolean,\n      default: false\n    },\n    shape: {\n      type: String,\n      default: 'round'\n    }\n  },\n\n  computed: {\n    checked: {\n      get() {\n        return this.parent\n          ? this.parent.value.indexOf(this.name) !== -1\n          : this.value;\n      },\n\n      set(val) {\n        const { parent } = this;\n        if (parent) {\n          const parentValue = this.parent.value.slice();\n          if (val) {\n            if (parent.max && parentValue.length >= parent.max) {\n              return;\n            }\n            /* istanbul ignore else */\n            if (parentValue.indexOf(this.name) === -1) {\n              parentValue.push(this.name);\n              parent.$emit('input', parentValue);\n            }\n          } else {\n            const index = parentValue.indexOf(this.name);\n            /* istanbul ignore else */\n            if (index !== -1) {\n              parentValue.splice(index, 1);\n              parent.$emit('input', parentValue);\n            }\n          }\n        } else {\n          this.$emit('input', val);\n        }\n      }\n    },\n\n    isDisabled() {\n      return (this.parent && this.parent.disabled) || this.disabled;\n    }\n  },\n\n  watch: {\n    value(val) {\n      this.$emit('change', val);\n    }\n  },\n\n  created() {\n    this.findParent('x-checkbox-group');\n  },\n\n  methods: {\n    toggle(target) {\n      if (!this.isDisabled && !(target === 'label' && this.labelDisabled)) {\n        this.checked = !this.checked;\n      }\n    }\n  }\n});\n</script>\n"]}]}