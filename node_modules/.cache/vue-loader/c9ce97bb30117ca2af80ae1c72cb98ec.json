{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/circle/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/circle/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport { raf, cancel } from '../utils/raf';\n\nexport default create({\n  name: 'circle',\n\n  props: {\n    text: String,\n    value: Number,\n    speed: Number,\n    size: {\n      type: String,\n      default: '100px'\n    },\n    fill: {\n      type: String,\n      default: 'none'\n    },\n    rate: {\n      type: Number,\n      default: 100\n    },\n    layerColor: {\n      type: String,\n      default: '#fff'\n    },\n    color: {\n      type: String,\n      default: '#38f'\n    },\n    strokeWidth: {\n      type: Number,\n      default: 40\n    },\n    clockwise: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  beforeCreate() {\n    this.perimeter = 3140;\n    this.path = 'M 530 530 m -500, 0 a 500, 500 0 1, 1 1000, 0 a 500, 500 0 1, 1 -1000, 0';\n  },\n\n  computed: {\n    style() {\n      return {\n        width: this.size,\n        height: this.size\n      };\n    },\n\n    layerStyle() {\n      let offset = this.perimeter * (100 - this.value) / 100;\n      offset = this.clockwise ? offset : this.perimeter * 2 - offset;\n      return {\n        stroke: `${this.color}`,\n        strokeDashoffset: `${offset}px`,\n        strokeWidth: `${this.strokeWidth + 1}px`\n      };\n    },\n\n    hoverStyle() {\n      return {\n        fill: `${this.fill}`,\n        stroke: `${this.layerColor}`,\n        strokeWidth: `${this.strokeWidth}px`\n      };\n    }\n  },\n\n  watch: {\n    rate: {\n      handler() {\n        this.startTime = Date.now();\n        this.startRate = this.value;\n        this.endRate = this.format(this.rate);\n        this.increase = this.endRate > this.startRate;\n        this.duration = Math.abs((this.startRate - this.endRate) * 1000 / this.speed);\n        if (this.speed) {\n          cancel(this.rafId);\n          this.rafId = raf(this.animate);\n        } else {\n          this.$emit('input', this.endRate);\n        }\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    animate() {\n      const now = Date.now();\n      const progress = Math.min((now - this.startTime) / this.duration, 1);\n      const rate = progress * (this.endRate - this.startRate) + this.startRate;\n      this.$emit('input', this.format(parseFloat(rate.toFixed(1))));\n      if (this.increase ? rate < this.endRate : rate > this.endRate) {\n        this.rafId = raf(this.animate);\n      }\n    },\n\n    format(rate) {\n      return Math.min(Math.max(rate, 0), 100);\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/circle","sourcesContent":["<template>\n  <div :class=\"b()\" :style=\"style\">\n    <svg viewBox=\"0 0 1060 1060\">\n      <path :class=\"b('hover')\" :style=\"hoverStyle\" :d=\"path\" />\n      <path :class=\"b('layer')\" :style=\"layerStyle\" :d=\"path\" />\n    </svg>\n    <slot>\n      <div :class=\"b('text')\">{{ text }}</div>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport { raf, cancel } from '../utils/raf';\n\nexport default create({\n  name: 'circle',\n\n  props: {\n    text: String,\n    value: Number,\n    speed: Number,\n    size: {\n      type: String,\n      default: '100px'\n    },\n    fill: {\n      type: String,\n      default: 'none'\n    },\n    rate: {\n      type: Number,\n      default: 100\n    },\n    layerColor: {\n      type: String,\n      default: '#fff'\n    },\n    color: {\n      type: String,\n      default: '#38f'\n    },\n    strokeWidth: {\n      type: Number,\n      default: 40\n    },\n    clockwise: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  beforeCreate() {\n    this.perimeter = 3140;\n    this.path = 'M 530 530 m -500, 0 a 500, 500 0 1, 1 1000, 0 a 500, 500 0 1, 1 -1000, 0';\n  },\n\n  computed: {\n    style() {\n      return {\n        width: this.size,\n        height: this.size\n      };\n    },\n\n    layerStyle() {\n      let offset = this.perimeter * (100 - this.value) / 100;\n      offset = this.clockwise ? offset : this.perimeter * 2 - offset;\n      return {\n        stroke: `${this.color}`,\n        strokeDashoffset: `${offset}px`,\n        strokeWidth: `${this.strokeWidth + 1}px`\n      };\n    },\n\n    hoverStyle() {\n      return {\n        fill: `${this.fill}`,\n        stroke: `${this.layerColor}`,\n        strokeWidth: `${this.strokeWidth}px`\n      };\n    }\n  },\n\n  watch: {\n    rate: {\n      handler() {\n        this.startTime = Date.now();\n        this.startRate = this.value;\n        this.endRate = this.format(this.rate);\n        this.increase = this.endRate > this.startRate;\n        this.duration = Math.abs((this.startRate - this.endRate) * 1000 / this.speed);\n        if (this.speed) {\n          cancel(this.rafId);\n          this.rafId = raf(this.animate);\n        } else {\n          this.$emit('input', this.endRate);\n        }\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    animate() {\n      const now = Date.now();\n      const progress = Math.min((now - this.startTime) / this.duration, 1);\n      const rate = progress * (this.endRate - this.startRate) + this.startRate;\n      this.$emit('input', this.format(parseFloat(rate.toFixed(1))));\n      if (this.increase ? rate < this.endRate : rate > this.endRate) {\n        this.rafId = raf(this.animate);\n      }\n    },\n\n    format(rate) {\n      return Math.min(Math.max(rate, 0), 100);\n    }\n  }\n});\n</script>\n"]}]}