{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/progress/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/progress/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\n\nexport default create({\n  name: 'progress',\n\n  props: {\n    inactive: Boolean,\n    pivotText: String,\n    pivotColor: String,\n    percentage: {\n      type: Number,\n      required: true,\n      validator: value => value >= 0 && value <= 100\n    },\n    showPivot: {\n      type: Boolean,\n      default: true\n    },\n    color: {\n      type: String,\n      default: '#38f'\n    },\n    textColor: {\n      type: String,\n      default: '#fff'\n    }\n  },\n\n  data() {\n    return {\n      pivotWidth: 0,\n      progressWidth: 0\n    };\n  },\n\n  computed: {\n    text() {\n      return this.isDef(this.pivotText)\n        ? this.pivotText\n        : this.percentage + '%';\n    },\n\n    currentColor() {\n      return this.inactive ? '#cacaca' : this.color;\n    },\n\n    pivotStyle() {\n      return {\n        color: this.textColor,\n        background: this.pivotColor || this.currentColor\n      };\n    },\n\n    portionStyle() {\n      return {\n        width: (this.progressWidth - this.pivotWidth) * this.percentage / 100 + 'px',\n        background: this.currentColor\n      };\n    }\n  },\n\n  mounted() {\n    this.getWidth();\n  },\n\n  watch: {\n    showPivot() {\n      this.getWidth();\n    },\n\n    pivotText() {\n      this.getWidth();\n    }\n  },\n\n  methods: {\n    getWidth() {\n      this.progressWidth = this.$el.offsetWidth;\n      this.pivotWidth = this.$refs.pivot ? this.$refs.pivot.offsetWidth : 0;\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;AASA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/progress","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <span :class=\"b('portion', { 'with-pivot': showPivot && text })\" :style=\"portionStyle\">\n      <span v-if=\"showPivot && text\" ref=\"pivot\" :style=\"pivotStyle\" :class=\"b('pivot')\">{{ text }}</span>\n    </span>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\n\nexport default create({\n  name: 'progress',\n\n  props: {\n    inactive: Boolean,\n    pivotText: String,\n    pivotColor: String,\n    percentage: {\n      type: Number,\n      required: true,\n      validator: value => value >= 0 && value <= 100\n    },\n    showPivot: {\n      type: Boolean,\n      default: true\n    },\n    color: {\n      type: String,\n      default: '#38f'\n    },\n    textColor: {\n      type: String,\n      default: '#fff'\n    }\n  },\n\n  data() {\n    return {\n      pivotWidth: 0,\n      progressWidth: 0\n    };\n  },\n\n  computed: {\n    text() {\n      return this.isDef(this.pivotText)\n        ? this.pivotText\n        : this.percentage + '%';\n    },\n\n    currentColor() {\n      return this.inactive ? '#cacaca' : this.color;\n    },\n\n    pivotStyle() {\n      return {\n        color: this.textColor,\n        background: this.pivotColor || this.currentColor\n      };\n    },\n\n    portionStyle() {\n      return {\n        width: (this.progressWidth - this.pivotWidth) * this.percentage / 100 + 'px',\n        background: this.currentColor\n      };\n    }\n  },\n\n  mounted() {\n    this.getWidth();\n  },\n\n  watch: {\n    showPivot() {\n      this.getWidth();\n    },\n\n    pivotText() {\n      this.getWidth();\n    }\n  },\n\n  methods: {\n    getWidth() {\n      this.progressWidth = this.$el.offsetWidth;\n      this.pivotWidth = this.$refs.pivot ? this.$refs.pivot.offsetWidth : 0;\n    }\n  }\n});\n</script>\n"]}]}