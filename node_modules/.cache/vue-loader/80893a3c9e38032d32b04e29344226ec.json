{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/pull-refresh/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/pull-refresh/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport scrollUtils from '../utils/scroll';\nimport Touch from '../mixins/touch';\n\nexport default create({\n  name: 'pull-refresh',\n\n  mixins: [Touch],\n\n  props: {\n    disabled: Boolean,\n    pullingText: String,\n    loosingText: String,\n    loadingText: String,\n    value: {\n      type: Boolean,\n      required: true\n    },\n    animationDuration: {\n      type: Number,\n      default: 300\n    },\n    headHeight: {\n      type: Number,\n      default: 50\n    }\n  },\n\n  data() {\n    return {\n      status: 'normal',\n      height: 0,\n      duration: 0\n    };\n  },\n\n  computed: {\n    style() {\n      return {\n        transition: `${this.duration}ms`,\n        transform: `translate3d(0,${this.height}px, 0)`\n      };\n    },\n\n    untouchable() {\n      return this.status === 'loading' || this.disabled;\n    }\n  },\n\n  mounted() {\n    this.scrollEl = scrollUtils.getScrollEventTarget(this.$el);\n  },\n\n  watch: {\n    value(val) {\n      this.duration = this.animationDuration;\n      this.getStatus(val ? this.headHeight : 0, val);\n    }\n  },\n\n  methods: {\n    onTouchStart(event) {\n      if (this.untouchable) {\n        return;\n      }\n      if (this.getCeiling()) {\n        this.duration = 0;\n        this.touchStart(event);\n      }\n    },\n\n    onTouchMove(event) {\n      if (this.untouchable) {\n        return;\n      }\n\n      this.touchMove(event);\n\n      if (!this.ceiling && this.getCeiling()) {\n        this.duration = 0;\n        this.startY = event.touches[0].clientY;\n        this.deltaY = 0;\n      }\n\n      if (this.ceiling && this.deltaY >= 0) {\n        if (this.direction === 'vertical') {\n          this.getStatus(this.ease(this.deltaY));\n          event.cancelable && event.preventDefault();\n        }\n      }\n    },\n\n    onTouchEnd() {\n      if (this.untouchable) {\n        return;\n      }\n\n      if (this.ceiling && this.deltaY) {\n        this.duration = this.animationDuration;\n        if (this.status === 'loosing') {\n          this.getStatus(this.headHeight, true);\n          this.$emit('input', true);\n          this.$emit('refresh');\n        } else {\n          this.getStatus(0);\n        }\n      }\n    },\n\n    getCeiling() {\n      this.ceiling = scrollUtils.getScrollTop(this.scrollEl) === 0;\n      return this.ceiling;\n    },\n\n    ease(height) {\n      const { headHeight } = this;\n      return height < headHeight\n        ? height\n        : height < headHeight * 2\n          ? Math.round(headHeight + (height - headHeight) / 2)\n          : Math.round(headHeight * 1.5 + (height - headHeight * 2) / 4);\n    },\n\n    getStatus(height, isLoading) {\n      this.height = height;\n\n      const status = isLoading\n        ? 'loading' : height === 0\n          ? 'normal' : height < this.headHeight\n            ? 'pulling' : 'loosing';\n\n      if (status !== this.status) {\n        this.status = status;\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/pull-refresh","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <div\n      :class=\"b('track')\"\n      :style=\"style\"\n      @touchstart=\"onTouchStart\"\n      @touchmove=\"onTouchMove\"\n      @touchend=\"onTouchEnd\"\n      @touchcancel=\"onTouchEnd\"\n    >\n      <div :class=\"b('head')\">\n        <slot v-if=\"status === 'normal'\" name=\"normal\" />\n        <slot v-if=\"status === 'pulling'\" name=\"pulling\">\n          <span :class=\"b('text')\">{{ pullingText || $t('pulling') }}</span>\n        </slot>\n        <slot v-if=\"status === 'loosing'\" name=\"loosing\">\n          <span :class=\"b('text')\">{{ loosingText || $t('loosing') }}</span>\n        </slot>\n        <slot v-if=\"status === 'loading'\" name=\"loading\">\n          <div :class=\"b('loading')\">\n            <loading />\n            <span>{{ loadingText || $t('loadingTip') }}</span>\n          </div>\n        </slot>\n      </div>\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport scrollUtils from '../utils/scroll';\nimport Touch from '../mixins/touch';\n\nexport default create({\n  name: 'pull-refresh',\n\n  mixins: [Touch],\n\n  props: {\n    disabled: Boolean,\n    pullingText: String,\n    loosingText: String,\n    loadingText: String,\n    value: {\n      type: Boolean,\n      required: true\n    },\n    animationDuration: {\n      type: Number,\n      default: 300\n    },\n    headHeight: {\n      type: Number,\n      default: 50\n    }\n  },\n\n  data() {\n    return {\n      status: 'normal',\n      height: 0,\n      duration: 0\n    };\n  },\n\n  computed: {\n    style() {\n      return {\n        transition: `${this.duration}ms`,\n        transform: `translate3d(0,${this.height}px, 0)`\n      };\n    },\n\n    untouchable() {\n      return this.status === 'loading' || this.disabled;\n    }\n  },\n\n  mounted() {\n    this.scrollEl = scrollUtils.getScrollEventTarget(this.$el);\n  },\n\n  watch: {\n    value(val) {\n      this.duration = this.animationDuration;\n      this.getStatus(val ? this.headHeight : 0, val);\n    }\n  },\n\n  methods: {\n    onTouchStart(event) {\n      if (this.untouchable) {\n        return;\n      }\n      if (this.getCeiling()) {\n        this.duration = 0;\n        this.touchStart(event);\n      }\n    },\n\n    onTouchMove(event) {\n      if (this.untouchable) {\n        return;\n      }\n\n      this.touchMove(event);\n\n      if (!this.ceiling && this.getCeiling()) {\n        this.duration = 0;\n        this.startY = event.touches[0].clientY;\n        this.deltaY = 0;\n      }\n\n      if (this.ceiling && this.deltaY >= 0) {\n        if (this.direction === 'vertical') {\n          this.getStatus(this.ease(this.deltaY));\n          event.cancelable && event.preventDefault();\n        }\n      }\n    },\n\n    onTouchEnd() {\n      if (this.untouchable) {\n        return;\n      }\n\n      if (this.ceiling && this.deltaY) {\n        this.duration = this.animationDuration;\n        if (this.status === 'loosing') {\n          this.getStatus(this.headHeight, true);\n          this.$emit('input', true);\n          this.$emit('refresh');\n        } else {\n          this.getStatus(0);\n        }\n      }\n    },\n\n    getCeiling() {\n      this.ceiling = scrollUtils.getScrollTop(this.scrollEl) === 0;\n      return this.ceiling;\n    },\n\n    ease(height) {\n      const { headHeight } = this;\n      return height < headHeight\n        ? height\n        : height < headHeight * 2\n          ? Math.round(headHeight + (height - headHeight) / 2)\n          : Math.round(headHeight * 1.5 + (height - headHeight * 2) / 4);\n    },\n\n    getStatus(height, isLoading) {\n      this.height = height;\n\n      const status = isLoading\n        ? 'loading' : height === 0\n          ? 'normal' : height < this.headHeight\n            ? 'pulling' : 'loosing';\n\n      if (status !== this.status) {\n        this.status = status;\n      }\n    }\n  }\n});\n</script>\n"]}]}