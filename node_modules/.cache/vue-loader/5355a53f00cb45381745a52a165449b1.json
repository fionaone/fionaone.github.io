{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/image-preview/ImagePreview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/image-preview/ImagePreview.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport Popup from '../mixins/popup';\nimport Touch from '../mixins/touch';\nimport Swipe from '../swipe';\nimport SwipeItem from '../swipe-item';\nimport { range } from '../utils';\n\nconst MAX_ZOOM = 3;\nconst MIN_ZOOM = 1 / 3;\n\nexport default create({\n  name: 'image-preview',\n\n  mixins: [Popup, Touch],\n\n  components: {\n    Swipe,\n    SwipeItem\n  },\n\n  props: {\n    showIndicators: Boolean,\n    images: {\n      type: Array,\n      default: () => []\n    },\n    startPosition: {\n      type: Number,\n      default: 0\n    },\n    overlay: {\n      type: Boolean,\n      default: true\n    },\n    showIndex: {\n      type: Boolean,\n      default: true\n    },\n    overlayClass: {\n      type: String,\n      default: 'van-image-preview__overlay'\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      active: 0\n    };\n  },\n\n  computed: {\n    count() {\n      return this.images.length;\n    },\n\n    imageStyle() {\n      const { scale } = this;\n      const style = {\n        transition: this.zooming || this.moving ? '' : '.3s all'\n      };\n\n      if (scale !== 1) {\n        style.transform = `scale3d(${scale}, ${scale}, 1) translate(${this\n          .moveX / scale}px, ${this.moveY / scale}px)`;\n      }\n\n      return style;\n    }\n  },\n\n  watch: {\n    value() {\n      this.active = this.startPosition;\n    },\n\n    startPosition(active) {\n      this.active = active;\n    }\n  },\n\n  methods: {\n    onWrapperTouchStart() {\n      this.touchStartTime = new Date();\n    },\n\n    onWrapperTouchEnd(event) {\n      event.preventDefault();\n\n      const deltaTime = new Date() - this.touchStartTime;\n      const { offsetX = 0, offsetY = 0 } = this.$refs.swipe || {};\n\n      // prevent long tap to close component\n      if (deltaTime < 300 && offsetX < 10 && offsetY < 10) {\n        this.$emit('input', false);\n        this.resetScale();\n      }\n    },\n\n    getDistance(touches) {\n      return Math.sqrt(\n        Math.abs(\n          (touches[0].clientX - touches[1].clientX) *\n            (touches[0].clientY - touches[1].clientY)\n        )\n      );\n    },\n\n    startMove(event) {\n      const image = event.currentTarget;\n      const rect = image.getBoundingClientRect();\n      const winWidth = window.innerWidth;\n      const winHeight = window.innerHeight;\n\n      this.touchStart(event);\n      this.moving = true;\n      this.startMoveX = this.moveX;\n      this.startMoveY = this.moveY;\n      this.maxMoveX = Math.max(0, (rect.width - winWidth) / 2);\n      this.maxMoveY = Math.max(0, (rect.height - winHeight) / 2);\n    },\n\n    startZoom(event) {\n      this.moving = false;\n      this.zooming = true;\n      this.startScale = this.scale;\n      this.startDistance = this.getDistance(event.touches);\n    },\n\n    onTouchStart(event) {\n      const { touches } = event;\n      const { offsetX } = this.$refs.swipe;\n\n      if (touches.length === 1 && this.scale !== 1) {\n        this.startMove(event);\n      } /* istanbul ignore else */ else if (touches.length === 2 && !offsetX) {\n        this.startZoom(event);\n      }\n    },\n\n    onTouchMove(event) {\n      const { touches } = event;\n      if (this.moving || this.zooming) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      if (this.moving) {\n        this.touchMove(event);\n        const moveX = this.deltaX + this.startMoveX;\n        const moveY = this.deltaY + this.startMoveY;\n        this.moveX = range(moveX, -this.maxMoveX, this.maxMoveX);\n        this.moveY = range(moveY, -this.maxMoveY, this.maxMoveY);\n      }\n\n      if (this.zooming && touches.length === 2) {\n        const distance = this.getDistance(touches);\n        const scale = (this.startScale * distance) / this.startDistance;\n        this.scale = range(scale, MIN_ZOOM, MAX_ZOOM);\n      }\n    },\n\n    onTouchEnd(event) {\n      /* istanbul ignore else */\n      if (this.moving || this.zooming) {\n        let stopPropagation = true;\n\n        if (\n          this.moving &&\n          this.startMoveX === this.moveX &&\n          this.startMoveY === this.moveY\n        ) {\n          stopPropagation = false;\n        }\n\n        if (!event.touches.length) {\n          this.moving = false;\n          this.zooming = false;\n          this.startMoveX = 0;\n          this.startMoveY = 0;\n          this.startScale = 1;\n\n          if (this.scale < 1) {\n            this.resetScale();\n          }\n        }\n\n        if (stopPropagation) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    },\n\n    onChange(active) {\n      this.resetScale();\n      this.active = active;\n    },\n\n    resetScale() {\n      this.scale = 1;\n      this.moveX = 0;\n      this.moveY = 0;\n    }\n  }\n});\n",{"version":3,"sources":["ImagePreview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ImagePreview.vue","sourceRoot":"node_modules/healen-x-ui/packages/image-preview","sourcesContent":["<template>\n  <div\n    v-if=\"value\"\n    :class=\"b()\"\n    @touchstart=\"onWrapperTouchStart\"\n    @touchend=\"onWrapperTouchEnd\"\n    @touchcancel=\"onWrapperTouchEnd\"\n  >\n    <div v-if=\"showIndex\" :class=\"b('index')\">{{ active + 1 }}/{{ count }}</div>\n    <swipe\n      ref=\"swipe\"\n      :initial-swipe=\"startPosition\"\n      :show-indicators=\"showIndicators\"\n      @change=\"onChange\"\n    >\n      <swipe-item v-for=\"(item, index) in images\" :key=\"index\">\n        <img\n          :class=\"b('image')\"\n          :src=\"item\"\n          :style=\"index === active ? imageStyle : null\"\n          @touchstart=\"onTouchStart\"\n          @touchmove=\"onTouchMove\"\n          @touchend=\"onTouchEnd\"\n          @touchcancel=\"onTouchEnd\"\n        >\n      </swipe-item>\n    </swipe>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport Popup from '../mixins/popup';\nimport Touch from '../mixins/touch';\nimport Swipe from '../swipe';\nimport SwipeItem from '../swipe-item';\nimport { range } from '../utils';\n\nconst MAX_ZOOM = 3;\nconst MIN_ZOOM = 1 / 3;\n\nexport default create({\n  name: 'image-preview',\n\n  mixins: [Popup, Touch],\n\n  components: {\n    Swipe,\n    SwipeItem\n  },\n\n  props: {\n    showIndicators: Boolean,\n    images: {\n      type: Array,\n      default: () => []\n    },\n    startPosition: {\n      type: Number,\n      default: 0\n    },\n    overlay: {\n      type: Boolean,\n      default: true\n    },\n    showIndex: {\n      type: Boolean,\n      default: true\n    },\n    overlayClass: {\n      type: String,\n      default: 'van-image-preview__overlay'\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      active: 0\n    };\n  },\n\n  computed: {\n    count() {\n      return this.images.length;\n    },\n\n    imageStyle() {\n      const { scale } = this;\n      const style = {\n        transition: this.zooming || this.moving ? '' : '.3s all'\n      };\n\n      if (scale !== 1) {\n        style.transform = `scale3d(${scale}, ${scale}, 1) translate(${this\n          .moveX / scale}px, ${this.moveY / scale}px)`;\n      }\n\n      return style;\n    }\n  },\n\n  watch: {\n    value() {\n      this.active = this.startPosition;\n    },\n\n    startPosition(active) {\n      this.active = active;\n    }\n  },\n\n  methods: {\n    onWrapperTouchStart() {\n      this.touchStartTime = new Date();\n    },\n\n    onWrapperTouchEnd(event) {\n      event.preventDefault();\n\n      const deltaTime = new Date() - this.touchStartTime;\n      const { offsetX = 0, offsetY = 0 } = this.$refs.swipe || {};\n\n      // prevent long tap to close component\n      if (deltaTime < 300 && offsetX < 10 && offsetY < 10) {\n        this.$emit('input', false);\n        this.resetScale();\n      }\n    },\n\n    getDistance(touches) {\n      return Math.sqrt(\n        Math.abs(\n          (touches[0].clientX - touches[1].clientX) *\n            (touches[0].clientY - touches[1].clientY)\n        )\n      );\n    },\n\n    startMove(event) {\n      const image = event.currentTarget;\n      const rect = image.getBoundingClientRect();\n      const winWidth = window.innerWidth;\n      const winHeight = window.innerHeight;\n\n      this.touchStart(event);\n      this.moving = true;\n      this.startMoveX = this.moveX;\n      this.startMoveY = this.moveY;\n      this.maxMoveX = Math.max(0, (rect.width - winWidth) / 2);\n      this.maxMoveY = Math.max(0, (rect.height - winHeight) / 2);\n    },\n\n    startZoom(event) {\n      this.moving = false;\n      this.zooming = true;\n      this.startScale = this.scale;\n      this.startDistance = this.getDistance(event.touches);\n    },\n\n    onTouchStart(event) {\n      const { touches } = event;\n      const { offsetX } = this.$refs.swipe;\n\n      if (touches.length === 1 && this.scale !== 1) {\n        this.startMove(event);\n      } /* istanbul ignore else */ else if (touches.length === 2 && !offsetX) {\n        this.startZoom(event);\n      }\n    },\n\n    onTouchMove(event) {\n      const { touches } = event;\n      if (this.moving || this.zooming) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      if (this.moving) {\n        this.touchMove(event);\n        const moveX = this.deltaX + this.startMoveX;\n        const moveY = this.deltaY + this.startMoveY;\n        this.moveX = range(moveX, -this.maxMoveX, this.maxMoveX);\n        this.moveY = range(moveY, -this.maxMoveY, this.maxMoveY);\n      }\n\n      if (this.zooming && touches.length === 2) {\n        const distance = this.getDistance(touches);\n        const scale = (this.startScale * distance) / this.startDistance;\n        this.scale = range(scale, MIN_ZOOM, MAX_ZOOM);\n      }\n    },\n\n    onTouchEnd(event) {\n      /* istanbul ignore else */\n      if (this.moving || this.zooming) {\n        let stopPropagation = true;\n\n        if (\n          this.moving &&\n          this.startMoveX === this.moveX &&\n          this.startMoveY === this.moveY\n        ) {\n          stopPropagation = false;\n        }\n\n        if (!event.touches.length) {\n          this.moving = false;\n          this.zooming = false;\n          this.startMoveX = 0;\n          this.startMoveY = 0;\n          this.startScale = 1;\n\n          if (this.scale < 1) {\n            this.resetScale();\n          }\n        }\n\n        if (stopPropagation) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    },\n\n    onChange(active) {\n      this.resetScale();\n      this.active = active;\n    },\n\n    resetScale() {\n      this.scale = 1;\n      this.moveX = 0;\n      this.moveY = 0;\n    }\n  }\n});\n</script>\n"]}]}