{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/pagination/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/pagination/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\n\nexport default create({\n  name: 'pagination',\n\n  props: {\n    value: Number,\n    prevText: String,\n    nextText: String,\n    pageCount: Number,\n    forceEllipses: Boolean,\n    mode: {\n      type: String,\n      default: 'multi'\n    },\n    itemsPerPage: {\n      type: Number,\n      default: 10\n    },\n    showPageSize: {\n      type: Number,\n      default: 5\n    },\n    totalItems: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  computed: {\n    isMultiMode() {\n      return this.mode === 'multi';\n    },\n\n    computedPageCount() {\n      const count = this.pageCount || Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(1, count);\n    },\n\n    pageDesc() {\n      return this.value + '/' + this.computedPageCount;\n    },\n\n    pages() {\n      const pages = [];\n      const pageCount = this.computedPageCount;\n\n      // Default page limits\n      let startPage = 1;\n      let endPage = pageCount;\n      const isMaxSized = this.showPageSize !== undefined && this.showPageSize < pageCount;\n\n      // recompute if showPageSize\n      if (isMaxSized) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(this.value - Math.floor(this.showPageSize / 2), 1);\n        endPage = startPage + this.showPageSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > pageCount) {\n          endPage = pageCount;\n          startPage = endPage - this.showPageSize + 1;\n        }\n      }\n\n      // Add page number links\n      for (let number = startPage; number <= endPage; number++) {\n        const page = this.makePage(number, number, number === this.value);\n        pages.push(page);\n      }\n\n      // Add links to move between page sets\n      if (isMaxSized && this.showPageSize > 0 && this.forceEllipses) {\n        if (startPage > 1) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < pageCount) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    }\n  },\n\n  watch: {\n    value: {\n      handler(page) {\n        this.selectPage(page || this.value);\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    selectPage(page) {\n      page = Math.max(1, page);\n      page = Math.min(this.computedPageCount, page);\n      if (this.value !== page) {\n        this.$emit('input', page);\n        this.$emit('change', page);\n      }\n    },\n\n    makePage(number, text, active) {\n      return { number, text, active };\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/pagination","sourcesContent":["<template>\n  <ul :class=\"b({ simple: !isMultiMode })\">\n    <li\n      class=\"van-hairline\"\n      :class=\"[b('item', { disabled: value === 1 }), b('prev')]\"\n      @click=\"selectPage(value - 1)\"\n    >\n      {{ prevText || '上一页' }}\n    </li>\n    <li\n      v-if=\"isMultiMode\"\n      v-for=\"page in pages\"\n      class=\"van-hairline\"\n      :class=\"[b('item', { active: page.active }), b('page')]\"\n      @click=\"selectPage(page.number)\"\n    >\n      {{ page.text }}\n    </li>\n    <li v-if=\"!isMultiMode\" :class=\"b('page-desc')\">\n      <slot name=\"pageDesc\">{{ pageDesc }}</slot>\n    </li>\n    <li\n      class=\"van-hairline\"\n      :class=\"[b('item', { disabled: value === computedPageCount }), b('next')]\"\n      @click=\"selectPage(value + 1)\"\n    >\n      {{ nextText || '下一页' }}\n    </li>\n  </ul>\n</template>\n\n<script>\nimport create from '../utils/create';\n\nexport default create({\n  name: 'pagination',\n\n  props: {\n    value: Number,\n    prevText: String,\n    nextText: String,\n    pageCount: Number,\n    forceEllipses: Boolean,\n    mode: {\n      type: String,\n      default: 'multi'\n    },\n    itemsPerPage: {\n      type: Number,\n      default: 10\n    },\n    showPageSize: {\n      type: Number,\n      default: 5\n    },\n    totalItems: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  computed: {\n    isMultiMode() {\n      return this.mode === 'multi';\n    },\n\n    computedPageCount() {\n      const count = this.pageCount || Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(1, count);\n    },\n\n    pageDesc() {\n      return this.value + '/' + this.computedPageCount;\n    },\n\n    pages() {\n      const pages = [];\n      const pageCount = this.computedPageCount;\n\n      // Default page limits\n      let startPage = 1;\n      let endPage = pageCount;\n      const isMaxSized = this.showPageSize !== undefined && this.showPageSize < pageCount;\n\n      // recompute if showPageSize\n      if (isMaxSized) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(this.value - Math.floor(this.showPageSize / 2), 1);\n        endPage = startPage + this.showPageSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > pageCount) {\n          endPage = pageCount;\n          startPage = endPage - this.showPageSize + 1;\n        }\n      }\n\n      // Add page number links\n      for (let number = startPage; number <= endPage; number++) {\n        const page = this.makePage(number, number, number === this.value);\n        pages.push(page);\n      }\n\n      // Add links to move between page sets\n      if (isMaxSized && this.showPageSize > 0 && this.forceEllipses) {\n        if (startPage > 1) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < pageCount) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    }\n  },\n\n  watch: {\n    value: {\n      handler(page) {\n        this.selectPage(page || this.value);\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    selectPage(page) {\n      page = Math.max(1, page);\n      page = Math.min(this.computedPageCount, page);\n      if (this.value !== page) {\n        this.$emit('input', page);\n        this.$emit('change', page);\n      }\n    },\n\n    makePage(number, text, active) {\n      return { number, text, active };\n    }\n  }\n});\n</script>\n"]}]}