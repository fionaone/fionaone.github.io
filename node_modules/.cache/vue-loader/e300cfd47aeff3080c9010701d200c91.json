{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/stepper/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/stepper/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\n\nexport default create({\n  name: 'stepper',\n\n  props: {\n    value: null,\n    integer: Boolean,\n    disabled: Boolean,\n    disableInput: Boolean,\n    min: {\n      type: [String, Number],\n      default: 0\n    },\n    max: {\n      type: [String, Number],\n      default: Infinity\n    },\n    step: {\n      type: [String, Number],\n      default: 1\n    },\n    defaultValue: {\n      type: [String, Number],\n      default: 1\n    }\n  },\n\n  data() {\n    const value = this.range(this.isDef(this.value) ? this.value : this.defaultValue);\n    if (value !== +this.value) {\n      this.$emit('input', value);\n    }\n\n    return {\n      currentValue: value\n    };\n  },\n\n  computed: {\n    minusDisabled() {\n      return this.disabled || this.currentValue <= this.min;\n    },\n\n    plusDisabled() {\n      return this.disabled || this.currentValue >= this.max;\n    }\n  },\n\n  watch: {\n    value(val) {\n      if (val !== this.currentValue) {\n        this.currentValue = this.format(val);\n      }\n    },\n\n    currentValue(val) {\n      this.$emit('input', val);\n      this.$emit('change', val);\n    }\n  },\n\n  methods: {\n    // filterBar illegal characters\n    format(value) {\n      value = String(value).replace(/[^0-9\\.-]/g, '');\n      return value === '' ? 0 : this.integer ? Math.floor(value) : +value;\n    },\n\n    // limit value range\n    range(value) {\n      return Math.max(Math.min(this.max, this.format(value)), this.min);\n    },\n\n    onInput(event) {\n      const { value } = event.target;\n      const formatted = this.format(value);\n\n      if (+value !== formatted) {\n        event.target.value = formatted;\n      }\n\n      this.currentValue = formatted;\n    },\n\n    onChange(type) {\n      if (this[`${type}Disabled`]) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.step : +this.step;\n      const value = Math.round((this.currentValue + diff) * 100) / 100;\n      this.currentValue = this.range(value);\n      this.$emit(type);\n    },\n\n    onBlur(event) {\n      this.currentValue = this.range(this.currentValue);\n      this.$emit('blur', event);\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/stepper","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <button\n      :class=\"b('minus', { disabled: minusDisabled })\"\n      @click=\"onChange('minus')\"\n    />\n    <input\n      type=\"number\"\n      readonly\n      :class=\"b('input',{'vhide':value<=0})\"\n      :value=\"currentValue\"\n      @input=\"onInput\"\n      @blur=\"onBlur\"\n    >\n    <button\n      :class=\"b('plus', { disabled: plusDisabled })\"\n      @click=\"onChange('plus')\"\n    />\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\n\nexport default create({\n  name: 'stepper',\n\n  props: {\n    value: null,\n    integer: Boolean,\n    disabled: Boolean,\n    disableInput: Boolean,\n    min: {\n      type: [String, Number],\n      default: 0\n    },\n    max: {\n      type: [String, Number],\n      default: Infinity\n    },\n    step: {\n      type: [String, Number],\n      default: 1\n    },\n    defaultValue: {\n      type: [String, Number],\n      default: 1\n    }\n  },\n\n  data() {\n    const value = this.range(this.isDef(this.value) ? this.value : this.defaultValue);\n    if (value !== +this.value) {\n      this.$emit('input', value);\n    }\n\n    return {\n      currentValue: value\n    };\n  },\n\n  computed: {\n    minusDisabled() {\n      return this.disabled || this.currentValue <= this.min;\n    },\n\n    plusDisabled() {\n      return this.disabled || this.currentValue >= this.max;\n    }\n  },\n\n  watch: {\n    value(val) {\n      if (val !== this.currentValue) {\n        this.currentValue = this.format(val);\n      }\n    },\n\n    currentValue(val) {\n      this.$emit('input', val);\n      this.$emit('change', val);\n    }\n  },\n\n  methods: {\n    // filterBar illegal characters\n    format(value) {\n      value = String(value).replace(/[^0-9\\.-]/g, '');\n      return value === '' ? 0 : this.integer ? Math.floor(value) : +value;\n    },\n\n    // limit value range\n    range(value) {\n      return Math.max(Math.min(this.max, this.format(value)), this.min);\n    },\n\n    onInput(event) {\n      const { value } = event.target;\n      const formatted = this.format(value);\n\n      if (+value !== formatted) {\n        event.target.value = formatted;\n      }\n\n      this.currentValue = formatted;\n    },\n\n    onChange(type) {\n      if (this[`${type}Disabled`]) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.step : +this.step;\n      const value = Math.round((this.currentValue + diff) * 100) / 100;\n      this.currentValue = this.range(value);\n      this.$emit(type);\n    },\n\n    onBlur(event) {\n      this.currentValue = this.range(this.currentValue);\n      this.$emit('blur', event);\n    }\n  }\n});\n</script>\n"]}]}