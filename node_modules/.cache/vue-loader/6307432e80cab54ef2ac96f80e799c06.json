{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/sku/Sku.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/sku/Sku.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable camelcase */\nimport Vue from 'vue';\nimport Popup from '../popup';\nimport Toast from '../toast';\nimport SkuHeader from './components/SkuHeader';\nimport SkuRow from './components/SkuRow';\nimport SkuRowItem from './components/SkuRowItem';\nimport SkuStepper from './components/SkuStepper';\nimport SkuMessages from './components/SkuMessages';\nimport SkuActions from './components/SkuActions';\nimport {\n  isAllSelected,\n  isSkuChoosable,\n  getSkuComb,\n  getSelectedSkuValues\n} from './utils/skuHelper';\nimport { LIMIT_TYPE, UNSELECTED_SKU_VALUE_ID } from './constants';\nimport create from '../utils/create';\n\nconst { QUOTA_LIMIT } = LIMIT_TYPE;\n\nexport default create({\n  name: 'sku',\n\n  components: {\n    Popup,\n    SkuHeader,\n    SkuRow,\n    SkuRowItem,\n    SkuStepper,\n    SkuMessages,\n    SkuActions\n  },\n\n  props: {\n    sku: Object,\n    goods: Object,\n    value: Boolean,\n    buyText: String,\n    goodsId: [Number, String],\n    stepperTitle: String,\n    hideStock: Boolean,\n    getContainer: Function,\n    resetStepperOnHide: Boolean,\n    resetSelectedSkuOnHide: Boolean,\n    disableStepperInput: Boolean,\n    closeOnClickOverlay: Boolean,\n    initialSku: {\n      type: Object,\n      default: () => ({})\n    },\n    quota: {\n      type: Number,\n      default: 0\n    },\n    quotaUsed: {\n      type: Number,\n      default: 0\n    },\n    showAddCartBtn: {\n      type: Boolean,\n      default: true\n    },\n    bodyOffsetTop: {\n      type: Number,\n      default: 200\n    },\n    messageConfig: {\n      type: Object,\n      default: () => ({\n        placeholderMap: {},\n        uploadImg: () => Promise.resolve(),\n        uploadMaxSize: 5\n      })\n    },\n    customStepperConfig: {\n      type: Object,\n      default: () => ({})\n    },\n    customSkuValidator: Function\n  },\n\n  data() {\n    return {\n      selectedSku: {},\n      selectedNum: 1,\n      show: this.value\n    };\n  },\n\n  watch: {\n    show(val) {\n      this.$emit('input', val);\n      if (!val) {\n        const selectedSkuValues = getSelectedSkuValues(\n          this.sku.tree,\n          this.selectedSku\n        );\n\n        this.$emit('sku-close', {\n          selectedSkuValues,\n          selectedNum: this.selectedNum,\n          selectedSkuComb: this.selectedSkuComb\n        });\n\n        if (this.resetStepperOnHide) {\n          this.$refs.skuStepper && this.$refs.skuStepper.setCurrentNum(1);\n        }\n\n        if (this.resetSelectedSkuOnHide) {\n          this.resetSelectedSku(this.skuTree);\n        }\n      }\n    },\n    value(val) {\n      this.show = val;\n    },\n    skuTree(val) {\n      this.resetSelectedSku(val);\n    }\n  },\n\n  computed: {\n    bodyStyle() {\n      if (this.$isServer) {\n        return;\n      }\n\n      // header高度82px, sku actions高度50px，如果改动了样式自己传下bodyOffsetTop调整下\n      const maxHeight = window.innerHeight - this.bodyOffsetTop;\n\n      return {\n        maxHeight: maxHeight + 'px'\n      };\n    },\n\n    isSkuCombSelected() {\n      return isAllSelected(this.sku.tree, this.selectedSku);\n    },\n\n    isSkuEmpty() {\n      return Object.keys(this.sku).length === 0;\n    },\n\n    hasSku() {\n      return !this.sku.none_sku;\n    },\n\n    selectedSkuComb() {\n      if (!this.hasSku) {\n        return {\n          id: this.sku.collection_id,\n          price: Math.round(this.sku.price * 100),\n          stock_num: this.sku.stock_num\n        };\n      } else if (this.isSkuCombSelected) {\n        return getSkuComb(this.sku.list, this.selectedSku);\n      }\n      return null;\n    },\n\n    price() {\n      if (this.selectedSkuComb) {\n        return (this.selectedSkuComb.price / 100).toFixed(2);\n      }\n      // sku.price是一个格式化好的价格区间\n      return this.sku.price;\n    },\n\n    skuTree() {\n      return this.sku.tree || [];\n    }\n  },\n\n  created() {\n    const skuEventBus = new Vue();\n    this.skuEventBus = skuEventBus;\n\n    skuEventBus.$on('sku:close', this.onClose);\n    skuEventBus.$on('sku:select', this.onSelect);\n    skuEventBus.$on('sku:numChange', this.onNumChange);\n    skuEventBus.$on('sku:overLimit', this.onOverLimit);\n    skuEventBus.$on('sku:addCart', this.onAddCart);\n    skuEventBus.$on('sku:buy', this.onBuy);\n\n    this.resetSelectedSku(this.skuTree);\n    // 组件初始化后的钩子，抛出skuEventBus\n    this.$emit('after-sku-create', skuEventBus);\n  },\n\n  methods: {\n    resetSelectedSku(skuTree) {\n      this.selectedSku = {};\n      // 重置selectedSku\n      skuTree.forEach(item => {\n        this.selectedSku[item.k_s] = this.initialSku[item.k_s] || UNSELECTED_SKU_VALUE_ID;\n      });\n      // 只有一个sku规格值时默认选中\n      skuTree.forEach(item => {\n        const key = item.k_s;\n        const valueId = item.v[0].id;\n        if (\n          item.v.length === 1 &&\n          isSkuChoosable(this.sku.list, this.selectedSku, { key, valueId })\n        ) {\n          this.selectedSku[key] = valueId;\n        }\n      });\n    },\n\n    getSkuMessages() {\n      return this.$refs.skuMessages ? this.$refs.skuMessages.getMessages() : {};\n    },\n\n    getSkuCartMessages() {\n      return this.$refs.skuMessages\n        ? this.$refs.skuMessages.getCartMessages()\n        : {};\n    },\n\n    validateSkuMessages() {\n      return this.$refs.skuMessages\n        ? this.$refs.skuMessages.validateMessages()\n        : '';\n    },\n\n    validateSku() {\n      if (this.selectedNum === 0) {\n        return '商品已经无法购买啦';\n      }\n\n      if (this.isSkuCombSelected) {\n        return this.validateSkuMessages();\n      }\n\n      // 自定义sku校验\n      if (this.customSkuValidator) {\n        const err = this.customSkuValidator(this);\n        if (err) return err;\n      }\n\n      return '请先选择商品规格';\n    },\n\n    onClose() {\n      this.show = false;\n    },\n\n    onSelect(skuValue) {\n      // 点击已选中的sku时则取消选中\n      this.selectedSku =\n        this.selectedSku[skuValue.skuKeyStr] === skuValue.id\n          ? { ...this.selectedSku, [skuValue.skuKeyStr]: UNSELECTED_SKU_VALUE_ID }\n          : { ...this.selectedSku, [skuValue.skuKeyStr]: skuValue.id };\n\n      this.$emit('sku-selected', {\n        skuValue,\n        selectedSku: this.selectedSku,\n        selectedSkuComb: this.selectedSkuComb\n      });\n    },\n\n    onNumChange(num) {\n      this.selectedNum = num;\n    },\n\n    onOverLimit(data) {\n      const { action, limitType, quota, quotaUsed } = data;\n      const { handleOverLimit } = this.customStepperConfig;\n\n      if (handleOverLimit) {\n        handleOverLimit(data);\n        return;\n      }\n\n      if (action === 'minus') {\n        Toast('至少选择一件');\n      } else if (action === 'plus') {\n        if (limitType === QUOTA_LIMIT) {\n          let msg = `限购${quota}件`;\n          if (quotaUsed > 0) msg += `，${`你已购买${quotaUsed}件`}`;\n          Toast(msg);\n        } else {\n          Toast('库存不足');\n        }\n      }\n    },\n\n    onAddCart() {\n      this.onBuyOrAddCart('add-cart');\n    },\n\n    onBuy() {\n      this.onBuyOrAddCart('buy-clicked');\n    },\n\n    onBuyOrAddCart(type) {\n      const error = this.validateSku();\n      if (error) {\n        Toast(error);\n      } else {\n        this.$emit(type, this.getSkuData());\n      }\n    },\n\n    getSkuData() {\n      return {\n        goodsId: this.goodsId,\n        selectedNum: this.selectedNum,\n        selectedSkuComb: this.selectedSkuComb,\n        messages: this.getSkuMessages(),\n        cartMessages: this.getSkuCartMessages()\n      };\n    }\n  }\n});\n",{"version":3,"sources":["Sku.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Sku.vue","sourceRoot":"node_modules/healen-x-ui/packages/sku","sourcesContent":["<template>\n  <popup\n    v-if=\"!isSkuEmpty\"\n    v-model=\"show\"\n    position=\"bottom\"\n    class=\"van-sku-container\"\n    :close-on-click-overlay=\"closeOnClickOverlay\"\n    :get-container=\"getContainer\"\n  >\n    <!-- sku-header -->\n    <slot\n      name=\"sku-header\"\n      :sku-event-bus=\"skuEventBus\"\n      :selected-sku=\"selectedSku\"\n      :selected-sku-comb=\"selectedSkuComb\"\n    >\n      <sku-header\n        :sku-event-bus=\"skuEventBus\"\n        :selected-sku=\"selectedSku\"\n        :goods=\"goods\"\n        :sku=\"sku\"\n      >\n        <slot\n          name=\"sku-header-price\"\n          :price=\"price\"\n          :selected-sku-comb=\"selectedSkuComb\"\n        >\n          <div class=\"van-sku__goods-price\">\n            <span class=\"van-sku__price-symbol\">￥</span><span class=\"van-sku__price-num\">{{ price }}</span>\n          </div>\n        </slot>\n      </sku-header>\n    </slot>\n    <div class=\"van-sku-body\" :style=\"bodyStyle\">\n      <!-- sku-body-top -->\n      <slot name=\"sku-body-top\" :selected-sku=\"selectedSku\" :sku-event-bus=\"skuEventBus\" />\n      <!-- sku-group -->\n      <slot name=\"sku-group\" :selected-sku=\"selectedSku\" :sku-event-bus=\"skuEventBus\">\n        <div v-if=\"hasSku\" class=\"van-sku-group-container van-hairline--bottom\">\n          <sku-row\n            v-for=\"(skuTreeItem, index) in skuTree\"\n            :key=\"index\"\n            :sku-row=\"skuTreeItem\"\n          >\n            <sku-row-item\n              v-for=\"(skuValue, index) in skuTreeItem.v\"\n              :key=\"index\"\n              :sku-key-str=\"skuTreeItem.k_s\"\n              :sku-value=\"skuValue\"\n              :sku-event-bus=\"skuEventBus\"\n              :selected-sku=\"selectedSku\"\n              :sku-list=\"sku.list\"\n            />\n          </sku-row>\n        </div>\n      </slot>\n      <!-- extra-sku-group -->\n      <slot name=\"extra-sku-group\" :sku-event-bus=\"skuEventBus\"/>\n      <!-- sku-stepper -->\n      <slot\n        name=\"sku-stepper\"\n        :sku-event-bus=\"skuEventBus\"\n        :selected-sku=\"selectedSku\"\n        :selected-sku-comb=\"selectedSkuComb\"\n        :selected-num=\"selectedNum\"\n      >\n        <sku-stepper\n          ref=\"skuStepper\"\n          :sku-event-bus=\"skuEventBus\"\n          :selected-sku=\"selectedSku\"\n          :selected-sku-comb=\"selectedSkuComb\"\n          :selected-num=\"selectedNum\"\n          :stepper-title=\"stepperTitle\"\n          :sku-stock-num=\"sku.stock_num\"\n          :quota=\"quota\"\n          :quota-used=\"quotaUsed\"\n          :disable-stepper-input=\"disableStepperInput\"\n          :hide-stock=\"hideStock\"\n          :custom-stepper-config=\"customStepperConfig\"\n          @change=\"$emit('stepper-change', $event)\"\n        />\n      </slot>\n      <!-- sku-messages -->\n      <slot name=\"sku-messages\">\n        <sku-messages\n          ref=\"skuMessages\"\n          :goods-id=\"goodsId\"\n          :message-config=\"messageConfig\"\n          :messages=\"sku.messages\"\n        />\n      </slot>\n    </div>\n    <!-- sku-actions -->\n    <slot name=\"sku-actions\" :sku-event-bus=\"skuEventBus\">\n      <sku-actions\n        :sku-event-bus=\"skuEventBus\"\n        :buy-text=\"buyText\"\n        :show-add-cart-btn=\"showAddCartBtn\"\n      />\n    </slot>\n  </popup>\n</template>\n\n<script>\n/* eslint-disable camelcase */\nimport Vue from 'vue';\nimport Popup from '../popup';\nimport Toast from '../toast';\nimport SkuHeader from './components/SkuHeader';\nimport SkuRow from './components/SkuRow';\nimport SkuRowItem from './components/SkuRowItem';\nimport SkuStepper from './components/SkuStepper';\nimport SkuMessages from './components/SkuMessages';\nimport SkuActions from './components/SkuActions';\nimport {\n  isAllSelected,\n  isSkuChoosable,\n  getSkuComb,\n  getSelectedSkuValues\n} from './utils/skuHelper';\nimport { LIMIT_TYPE, UNSELECTED_SKU_VALUE_ID } from './constants';\nimport create from '../utils/create';\n\nconst { QUOTA_LIMIT } = LIMIT_TYPE;\n\nexport default create({\n  name: 'sku',\n\n  components: {\n    Popup,\n    SkuHeader,\n    SkuRow,\n    SkuRowItem,\n    SkuStepper,\n    SkuMessages,\n    SkuActions\n  },\n\n  props: {\n    sku: Object,\n    goods: Object,\n    value: Boolean,\n    buyText: String,\n    goodsId: [Number, String],\n    stepperTitle: String,\n    hideStock: Boolean,\n    getContainer: Function,\n    resetStepperOnHide: Boolean,\n    resetSelectedSkuOnHide: Boolean,\n    disableStepperInput: Boolean,\n    closeOnClickOverlay: Boolean,\n    initialSku: {\n      type: Object,\n      default: () => ({})\n    },\n    quota: {\n      type: Number,\n      default: 0\n    },\n    quotaUsed: {\n      type: Number,\n      default: 0\n    },\n    showAddCartBtn: {\n      type: Boolean,\n      default: true\n    },\n    bodyOffsetTop: {\n      type: Number,\n      default: 200\n    },\n    messageConfig: {\n      type: Object,\n      default: () => ({\n        placeholderMap: {},\n        uploadImg: () => Promise.resolve(),\n        uploadMaxSize: 5\n      })\n    },\n    customStepperConfig: {\n      type: Object,\n      default: () => ({})\n    },\n    customSkuValidator: Function\n  },\n\n  data() {\n    return {\n      selectedSku: {},\n      selectedNum: 1,\n      show: this.value\n    };\n  },\n\n  watch: {\n    show(val) {\n      this.$emit('input', val);\n      if (!val) {\n        const selectedSkuValues = getSelectedSkuValues(\n          this.sku.tree,\n          this.selectedSku\n        );\n\n        this.$emit('sku-close', {\n          selectedSkuValues,\n          selectedNum: this.selectedNum,\n          selectedSkuComb: this.selectedSkuComb\n        });\n\n        if (this.resetStepperOnHide) {\n          this.$refs.skuStepper && this.$refs.skuStepper.setCurrentNum(1);\n        }\n\n        if (this.resetSelectedSkuOnHide) {\n          this.resetSelectedSku(this.skuTree);\n        }\n      }\n    },\n    value(val) {\n      this.show = val;\n    },\n    skuTree(val) {\n      this.resetSelectedSku(val);\n    }\n  },\n\n  computed: {\n    bodyStyle() {\n      if (this.$isServer) {\n        return;\n      }\n\n      // header高度82px, sku actions高度50px，如果改动了样式自己传下bodyOffsetTop调整下\n      const maxHeight = window.innerHeight - this.bodyOffsetTop;\n\n      return {\n        maxHeight: maxHeight + 'px'\n      };\n    },\n\n    isSkuCombSelected() {\n      return isAllSelected(this.sku.tree, this.selectedSku);\n    },\n\n    isSkuEmpty() {\n      return Object.keys(this.sku).length === 0;\n    },\n\n    hasSku() {\n      return !this.sku.none_sku;\n    },\n\n    selectedSkuComb() {\n      if (!this.hasSku) {\n        return {\n          id: this.sku.collection_id,\n          price: Math.round(this.sku.price * 100),\n          stock_num: this.sku.stock_num\n        };\n      } else if (this.isSkuCombSelected) {\n        return getSkuComb(this.sku.list, this.selectedSku);\n      }\n      return null;\n    },\n\n    price() {\n      if (this.selectedSkuComb) {\n        return (this.selectedSkuComb.price / 100).toFixed(2);\n      }\n      // sku.price是一个格式化好的价格区间\n      return this.sku.price;\n    },\n\n    skuTree() {\n      return this.sku.tree || [];\n    }\n  },\n\n  created() {\n    const skuEventBus = new Vue();\n    this.skuEventBus = skuEventBus;\n\n    skuEventBus.$on('sku:close', this.onClose);\n    skuEventBus.$on('sku:select', this.onSelect);\n    skuEventBus.$on('sku:numChange', this.onNumChange);\n    skuEventBus.$on('sku:overLimit', this.onOverLimit);\n    skuEventBus.$on('sku:addCart', this.onAddCart);\n    skuEventBus.$on('sku:buy', this.onBuy);\n\n    this.resetSelectedSku(this.skuTree);\n    // 组件初始化后的钩子，抛出skuEventBus\n    this.$emit('after-sku-create', skuEventBus);\n  },\n\n  methods: {\n    resetSelectedSku(skuTree) {\n      this.selectedSku = {};\n      // 重置selectedSku\n      skuTree.forEach(item => {\n        this.selectedSku[item.k_s] = this.initialSku[item.k_s] || UNSELECTED_SKU_VALUE_ID;\n      });\n      // 只有一个sku规格值时默认选中\n      skuTree.forEach(item => {\n        const key = item.k_s;\n        const valueId = item.v[0].id;\n        if (\n          item.v.length === 1 &&\n          isSkuChoosable(this.sku.list, this.selectedSku, { key, valueId })\n        ) {\n          this.selectedSku[key] = valueId;\n        }\n      });\n    },\n\n    getSkuMessages() {\n      return this.$refs.skuMessages ? this.$refs.skuMessages.getMessages() : {};\n    },\n\n    getSkuCartMessages() {\n      return this.$refs.skuMessages\n        ? this.$refs.skuMessages.getCartMessages()\n        : {};\n    },\n\n    validateSkuMessages() {\n      return this.$refs.skuMessages\n        ? this.$refs.skuMessages.validateMessages()\n        : '';\n    },\n\n    validateSku() {\n      if (this.selectedNum === 0) {\n        return '商品已经无法购买啦';\n      }\n\n      if (this.isSkuCombSelected) {\n        return this.validateSkuMessages();\n      }\n\n      // 自定义sku校验\n      if (this.customSkuValidator) {\n        const err = this.customSkuValidator(this);\n        if (err) return err;\n      }\n\n      return '请先选择商品规格';\n    },\n\n    onClose() {\n      this.show = false;\n    },\n\n    onSelect(skuValue) {\n      // 点击已选中的sku时则取消选中\n      this.selectedSku =\n        this.selectedSku[skuValue.skuKeyStr] === skuValue.id\n          ? { ...this.selectedSku, [skuValue.skuKeyStr]: UNSELECTED_SKU_VALUE_ID }\n          : { ...this.selectedSku, [skuValue.skuKeyStr]: skuValue.id };\n\n      this.$emit('sku-selected', {\n        skuValue,\n        selectedSku: this.selectedSku,\n        selectedSkuComb: this.selectedSkuComb\n      });\n    },\n\n    onNumChange(num) {\n      this.selectedNum = num;\n    },\n\n    onOverLimit(data) {\n      const { action, limitType, quota, quotaUsed } = data;\n      const { handleOverLimit } = this.customStepperConfig;\n\n      if (handleOverLimit) {\n        handleOverLimit(data);\n        return;\n      }\n\n      if (action === 'minus') {\n        Toast('至少选择一件');\n      } else if (action === 'plus') {\n        if (limitType === QUOTA_LIMIT) {\n          let msg = `限购${quota}件`;\n          if (quotaUsed > 0) msg += `，${`你已购买${quotaUsed}件`}`;\n          Toast(msg);\n        } else {\n          Toast('库存不足');\n        }\n      }\n    },\n\n    onAddCart() {\n      this.onBuyOrAddCart('add-cart');\n    },\n\n    onBuy() {\n      this.onBuyOrAddCart('buy-clicked');\n    },\n\n    onBuyOrAddCart(type) {\n      const error = this.validateSku();\n      if (error) {\n        Toast(error);\n      } else {\n        this.$emit(type, this.getSkuData());\n      }\n    },\n\n    getSkuData() {\n      return {\n        goodsId: this.goodsId,\n        selectedNum: this.selectedNum,\n        selectedSkuComb: this.selectedSkuComb,\n        messages: this.getSkuMessages(),\n        cartMessages: this.getSkuCartMessages()\n      };\n    }\n  }\n});\n</script>\n"]}]}