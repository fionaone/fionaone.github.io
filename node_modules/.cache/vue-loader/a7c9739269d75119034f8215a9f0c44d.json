{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/list/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/list/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport utils from '../utils/scroll';\nimport { on, off } from '../utils/event';\n\nexport default create({\n  name: 'list',\n\n  model: {\n    prop: 'loading'\n  },\n\n  props: {\n    loading: Boolean,\n    finished: Boolean,\n    immediateCheck: {\n      type: Boolean,\n      default: true\n    },\n    offset: {\n      type: Number,\n      default: 300\n    },\n    loadingText: String\n  },\n\n  mounted() {\n    this.scroller = utils.getScrollEventTarget(this.$el);\n    this.handler(true);\n\n    if (this.immediateCheck) {\n      this.$nextTick(this.check);\n    }\n  },\n\n  destroyed() {\n    this.handler(false);\n  },\n\n  activated() {\n    this.handler(true);\n  },\n\n  deactivated() {\n    this.handler(false);\n  },\n\n  watch: {\n    loading() {\n      this.$nextTick(this.check);\n    },\n\n    finished() {\n      this.$nextTick(this.check);\n    }\n  },\n\n  methods: {\n    check() {\n      if (this.loading || this.finished) {\n        return;\n      }\n\n      const el = this.$el;\n      const { scroller } = this;\n      const scrollerHeight = utils.getVisibleHeight(scroller);\n\n      /* istanbul ignore next */\n      if (!scrollerHeight || utils.getComputedStyle(el).display === 'none' || el.offsetParent === null) {\n        return;\n      }\n\n      const scrollTop = utils.getScrollTop(scroller);\n      const targetBottom = scrollTop + scrollerHeight;\n\n      let reachBottom = false;\n\n      /* istanbul ignore next */\n      if (el === scroller) {\n        reachBottom = scroller.scrollHeight - targetBottom < this.offset;\n      } else {\n        const elBottom =\n          utils.getElementTop(el) -\n          utils.getElementTop(scroller) +\n          utils.getVisibleHeight(el);\n        reachBottom = elBottom - scrollerHeight < this.offset;\n      }\n\n      /* istanbul ignore else */\n      if (reachBottom) {\n        this.$emit('input', true);\n        this.$emit('load');\n      }\n    },\n\n    handler(bind) {\n      /* istanbul ignore else */\n      if (this.binded !== bind) {\n        this.binded = bind;\n        (bind ? on : off)(this.scroller, 'scroll', this.check);\n      }\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/list","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <slot />\n    <div v-show=\"loading\" :class=\"b('loading')\">\n      <slot name=\"loading\">\n        <loading />\n        <span :class=\"b('loading-text')\">{{ loadingText || $t('loadingTip') }}</span>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport utils from '../utils/scroll';\nimport { on, off } from '../utils/event';\n\nexport default create({\n  name: 'list',\n\n  model: {\n    prop: 'loading'\n  },\n\n  props: {\n    loading: Boolean,\n    finished: Boolean,\n    immediateCheck: {\n      type: Boolean,\n      default: true\n    },\n    offset: {\n      type: Number,\n      default: 300\n    },\n    loadingText: String\n  },\n\n  mounted() {\n    this.scroller = utils.getScrollEventTarget(this.$el);\n    this.handler(true);\n\n    if (this.immediateCheck) {\n      this.$nextTick(this.check);\n    }\n  },\n\n  destroyed() {\n    this.handler(false);\n  },\n\n  activated() {\n    this.handler(true);\n  },\n\n  deactivated() {\n    this.handler(false);\n  },\n\n  watch: {\n    loading() {\n      this.$nextTick(this.check);\n    },\n\n    finished() {\n      this.$nextTick(this.check);\n    }\n  },\n\n  methods: {\n    check() {\n      if (this.loading || this.finished) {\n        return;\n      }\n\n      const el = this.$el;\n      const { scroller } = this;\n      const scrollerHeight = utils.getVisibleHeight(scroller);\n\n      /* istanbul ignore next */\n      if (!scrollerHeight || utils.getComputedStyle(el).display === 'none' || el.offsetParent === null) {\n        return;\n      }\n\n      const scrollTop = utils.getScrollTop(scroller);\n      const targetBottom = scrollTop + scrollerHeight;\n\n      let reachBottom = false;\n\n      /* istanbul ignore next */\n      if (el === scroller) {\n        reachBottom = scroller.scrollHeight - targetBottom < this.offset;\n      } else {\n        const elBottom =\n          utils.getElementTop(el) -\n          utils.getElementTop(scroller) +\n          utils.getVisibleHeight(el);\n        reachBottom = elBottom - scrollerHeight < this.offset;\n      }\n\n      /* istanbul ignore else */\n      if (reachBottom) {\n        this.$emit('input', true);\n        this.$emit('load');\n      }\n    },\n\n    handler(bind) {\n      /* istanbul ignore else */\n      if (this.binded !== bind) {\n        this.binded = bind;\n        (bind ? on : off)(this.scroller, 'scroll', this.check);\n      }\n    }\n  }\n});\n</script>\n"]}]}