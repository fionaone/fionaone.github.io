{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/picker/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/picker/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\nimport PickerColumn from './PickerColumn';\nimport deepClone from '../utils/deep-clone';\n\nexport default create({\n  name: 'picker',\n\n  components: {\n    PickerColumn\n  },\n\n  props: {\n    title: String,\n    loading: Boolean,\n    showToolbar: Boolean,\n    confirmButtonText: String,\n    cancelButtonText: String,\n    visibleItemCount: {\n      type: Number,\n      default: 5\n    },\n    valueKey: {\n      type: String,\n      default: 'text'\n    },\n    itemHeight: {\n      type: Number,\n      default: 44\n    },\n    columns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      children: []\n    };\n  },\n\n  computed: {\n    frameStyle() {\n      return {\n        height: this.itemHeight + 'px'\n      };\n    },\n\n    columnsStyle() {\n      return {\n        height: this.itemHeight * this.visibleItemCount + 'px'\n      };\n    },\n\n    simple() {\n      return this.columns.length && !this.columns[0].values;\n    }\n  },\n\n  watch: {\n    columns() {\n      this.setColumns();\n    }\n  },\n\n  methods: {\n    setColumns() {\n      const columns = this.simple ? [{ values: this.columns }] : this.columns;\n      columns.forEach((columns, index) => {\n        this.setColumnValues(index, deepClone(columns.values));\n      });\n    },\n\n    emit(event) {\n      if (this.simple) {\n        this.$emit(event, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit(event, this.getValues(), this.getIndexes());\n      }\n    },\n\n    onChange(columnIndex) {\n      if (this.simple) {\n        this.$emit('change', this, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit('change', this, this.getValues(), columnIndex);\n      }\n    },\n\n    // get column instance by index\n    getColumn(index) {\n      return this.children[index];\n    },\n\n    // get column value by index\n    getColumnValue(index) {\n      const column = this.getColumn(index);\n      return column && column.getValue();\n    },\n\n    // set column value by index\n    setColumnValue(index, value) {\n      const column = this.getColumn(index);\n      column && column.setValue(value);\n    },\n\n    // get column option index by column index\n    getColumnIndex(columnIndex) {\n      return (this.getColumn(columnIndex) || {}).currentIndex;\n    },\n\n    // set column option index by column index\n    setColumnIndex(columnIndex, optionIndex) {\n      const column = this.getColumn(columnIndex);\n      column && column.setIndex(optionIndex);\n    },\n\n    // get options of column by index\n    getColumnValues(index) {\n      return (this.children[index] || {}).options;\n    },\n\n    // set options of column by index\n    setColumnValues(index, options) {\n      const column = this.children[index];\n      if (column && JSON.stringify(column.options) !== JSON.stringify(options)) {\n        column.options = options;\n        column.setIndex(0);\n      }\n    },\n\n    // get values of all columns\n    getValues() {\n      return this.children.map(child => child.getValue());\n    },\n\n    // set values of all columns\n    setValues(values) {\n      values.forEach((value, index) => {\n        this.setColumnValue(index, value);\n      });\n    },\n\n    // get indexes of all columns\n    getIndexes() {\n      return this.children.map(child => child.currentIndex);\n    },\n\n    // set indexes of all columns\n    setIndexes(indexes) {\n      indexes.forEach((optionIndex, columnIndex) => {\n        this.setColumnIndex(columnIndex, optionIndex);\n      });\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/picker","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <div :class=\"b('toolbar')\" class=\"x-hairline--top-bottom\" v-if=\"showToolbar\">\n      <slot>\n        <div :class=\"b('cancel')\" @click=\"emit('cancel')\">{{ cancelButtonText || $t('cancel') }}</div>\n        <div :class=\"b('title')\" class=\"x-ellipsis\" v-if=\"title\" v-text=\"title\" />\n        <div :class=\"b('confirm')\" @click=\"emit('confirm')\">{{ confirmButtonText || $t('confirm') }}</div>\n      </slot>\n    </div>\n    <div v-if=\"loading\" :class=\"b('loading')\">\n      <loading />\n    </div>\n    <div :class=\"b('columns')\" :style=\"columnsStyle\" @touchmove.prevent>\n      <picker-column\n        v-for=\"(item, index) in (simple ? [columns] : columns)\"\n        :key=\"index\"\n        :value-key=\"valueKey\"\n        :initial-options=\"simple ? item : item.values\"\n        :class-name=\"item.className\"\n        :default-index=\"item.defaultIndex\"\n        :item-height=\"itemHeight\"\n        :visible-item-count=\"visibleItemCount\"\n        @change=\"onChange(index)\"\n      />\n      <div :class=\"b('frame')\" class=\"x-hairline--top-bottom\" :style=\"frameStyle\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\nimport PickerColumn from './PickerColumn';\nimport deepClone from '../utils/deep-clone';\n\nexport default create({\n  name: 'picker',\n\n  components: {\n    PickerColumn\n  },\n\n  props: {\n    title: String,\n    loading: Boolean,\n    showToolbar: Boolean,\n    confirmButtonText: String,\n    cancelButtonText: String,\n    visibleItemCount: {\n      type: Number,\n      default: 5\n    },\n    valueKey: {\n      type: String,\n      default: 'text'\n    },\n    itemHeight: {\n      type: Number,\n      default: 44\n    },\n    columns: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      children: []\n    };\n  },\n\n  computed: {\n    frameStyle() {\n      return {\n        height: this.itemHeight + 'px'\n      };\n    },\n\n    columnsStyle() {\n      return {\n        height: this.itemHeight * this.visibleItemCount + 'px'\n      };\n    },\n\n    simple() {\n      return this.columns.length && !this.columns[0].values;\n    }\n  },\n\n  watch: {\n    columns() {\n      this.setColumns();\n    }\n  },\n\n  methods: {\n    setColumns() {\n      const columns = this.simple ? [{ values: this.columns }] : this.columns;\n      columns.forEach((columns, index) => {\n        this.setColumnValues(index, deepClone(columns.values));\n      });\n    },\n\n    emit(event) {\n      if (this.simple) {\n        this.$emit(event, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit(event, this.getValues(), this.getIndexes());\n      }\n    },\n\n    onChange(columnIndex) {\n      if (this.simple) {\n        this.$emit('change', this, this.getColumnValue(0), this.getColumnIndex(0));\n      } else {\n        this.$emit('change', this, this.getValues(), columnIndex);\n      }\n    },\n\n    // get column instance by index\n    getColumn(index) {\n      return this.children[index];\n    },\n\n    // get column value by index\n    getColumnValue(index) {\n      const column = this.getColumn(index);\n      return column && column.getValue();\n    },\n\n    // set column value by index\n    setColumnValue(index, value) {\n      const column = this.getColumn(index);\n      column && column.setValue(value);\n    },\n\n    // get column option index by column index\n    getColumnIndex(columnIndex) {\n      return (this.getColumn(columnIndex) || {}).currentIndex;\n    },\n\n    // set column option index by column index\n    setColumnIndex(columnIndex, optionIndex) {\n      const column = this.getColumn(columnIndex);\n      column && column.setIndex(optionIndex);\n    },\n\n    // get options of column by index\n    getColumnValues(index) {\n      return (this.children[index] || {}).options;\n    },\n\n    // set options of column by index\n    setColumnValues(index, options) {\n      const column = this.children[index];\n      if (column && JSON.stringify(column.options) !== JSON.stringify(options)) {\n        column.options = options;\n        column.setIndex(0);\n      }\n    },\n\n    // get values of all columns\n    getValues() {\n      return this.children.map(child => child.getValue());\n    },\n\n    // set values of all columns\n    setValues(values) {\n      values.forEach((value, index) => {\n        this.setColumnValue(index, value);\n      });\n    },\n\n    // get indexes of all columns\n    getIndexes() {\n      return this.children.map(child => child.currentIndex);\n    },\n\n    // set indexes of all columns\n    setIndexes(indexes) {\n      indexes.forEach((optionIndex, columnIndex) => {\n        this.setColumnIndex(columnIndex, optionIndex);\n      });\n    }\n  }\n});\n</script>\n"]}]}