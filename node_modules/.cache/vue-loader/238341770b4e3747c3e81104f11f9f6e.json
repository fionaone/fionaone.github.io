{"remainingRequest":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/notice-bar/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zsy/Projects/about_me/node_modules/healen-x-ui/packages/notice-bar/index.vue","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zsy/Projects/about_me/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport create from '../utils/create';\n\nexport default create({\n  name: 'notice-bar',\n\n  props: {\n    text: String,\n    mode: String,\n    color: String,\n    leftIcon: String,\n    background: String,\n    delay: {\n      type: [String, Number],\n      default: 1\n    },\n    scrollable: {\n      type: Boolean,\n      default: true\n    },\n    speed: {\n      type: Number,\n      default: 50\n    }\n  },\n\n  data() {\n    return {\n      wrapWidth: 0,\n      firstRound: true,\n      duration: 0,\n      offsetWidth: 0,\n      showNoticeBar: true,\n      animationClass: ''\n    };\n  },\n\n  computed: {\n    iconName() {\n      return this.mode === 'closeable' ? 'close' : this.mode === 'link' ? 'arrow' : '';\n    },\n\n    barStyle() {\n      return {\n        color: this.color,\n        background: this.background\n      };\n    },\n\n    contentStyle() {\n      return {\n        paddingLeft: this.firstRound ? 0 : this.wrapWidth + 'px',\n        animationDelay: (this.firstRound ? this.delay : 0) + 's',\n        animationDuration: this.duration + 's'\n      };\n    }\n  },\n\n  watch: {\n    text: {\n      handler() {\n        this.$nextTick(() => {\n          const { wrap, content } = this.$refs;\n          if (!wrap || !content) {\n            return;\n          }\n\n          const wrapWidth = wrap.getBoundingClientRect().width;\n          const offsetWidth = content.getBoundingClientRect().width;\n          if (this.scrollable && offsetWidth > wrapWidth) {\n            this.wrapWidth = wrapWidth;\n            this.offsetWidth = offsetWidth;\n            this.duration = offsetWidth / this.speed;\n            this.animationClass = this.b('play');\n          }\n        });\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    onClickIcon() {\n      this.showNoticeBar = this.mode !== 'closeable';\n    },\n\n    onAnimationEnd() {\n      this.firstRound = false;\n      this.$nextTick(() => {\n        this.duration = (this.offsetWidth + this.wrapWidth) / this.speed;\n        this.animationClass = this.b('play--infinite');\n      });\n    }\n  }\n});\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/healen-x-ui/packages/notice-bar","sourcesContent":["<template>\n  <div\n    v-show=\"showNoticeBar\"\n    :class=\"b({ withicon: mode })\"\n    :style=\"barStyle\"\n    @click=\"$emit('click')\"\n  >\n    <div v-if=\"leftIcon\" :class=\"b('left-icon')\">\n      <x-icon :name=\"leftIcon\"/>\n    </div>\n    <div :class=\"b('wrap')\" ref=\"wrap\">\n      <div\n        ref=\"content\"\n        :class=\"[b('content'), animationClass, { 'van-ellipsis': !scrollable }]\"\n        :style=\"contentStyle\"\n        @animationend=\"onAnimationEnd\"\n        @webkitAnimationEnd=\"onAnimationEnd\"\n      >\n        <slot>{{ text }}</slot>\n      </div>\n    </div>\n    <icon\n      v-if=\"iconName\"\n      :class=\"b('right-icon')\"\n      :name=\"iconName\"\n      @click=\"onClickIcon\"\n    />\n  </div>\n</template>\n\n<script>\nimport create from '../utils/create';\n\nexport default create({\n  name: 'notice-bar',\n\n  props: {\n    text: String,\n    mode: String,\n    color: String,\n    leftIcon: String,\n    background: String,\n    delay: {\n      type: [String, Number],\n      default: 1\n    },\n    scrollable: {\n      type: Boolean,\n      default: true\n    },\n    speed: {\n      type: Number,\n      default: 50\n    }\n  },\n\n  data() {\n    return {\n      wrapWidth: 0,\n      firstRound: true,\n      duration: 0,\n      offsetWidth: 0,\n      showNoticeBar: true,\n      animationClass: ''\n    };\n  },\n\n  computed: {\n    iconName() {\n      return this.mode === 'closeable' ? 'close' : this.mode === 'link' ? 'arrow' : '';\n    },\n\n    barStyle() {\n      return {\n        color: this.color,\n        background: this.background\n      };\n    },\n\n    contentStyle() {\n      return {\n        paddingLeft: this.firstRound ? 0 : this.wrapWidth + 'px',\n        animationDelay: (this.firstRound ? this.delay : 0) + 's',\n        animationDuration: this.duration + 's'\n      };\n    }\n  },\n\n  watch: {\n    text: {\n      handler() {\n        this.$nextTick(() => {\n          const { wrap, content } = this.$refs;\n          if (!wrap || !content) {\n            return;\n          }\n\n          const wrapWidth = wrap.getBoundingClientRect().width;\n          const offsetWidth = content.getBoundingClientRect().width;\n          if (this.scrollable && offsetWidth > wrapWidth) {\n            this.wrapWidth = wrapWidth;\n            this.offsetWidth = offsetWidth;\n            this.duration = offsetWidth / this.speed;\n            this.animationClass = this.b('play');\n          }\n        });\n      },\n      immediate: true\n    }\n  },\n\n  methods: {\n    onClickIcon() {\n      this.showNoticeBar = this.mode !== 'closeable';\n    },\n\n    onAnimationEnd() {\n      this.firstRound = false;\n      this.$nextTick(() => {\n        this.duration = (this.offsetWidth + this.wrapWidth) / this.speed;\n        this.animationClass = this.b('play--infinite');\n      });\n    }\n  }\n});\n</script>\n"]}]}